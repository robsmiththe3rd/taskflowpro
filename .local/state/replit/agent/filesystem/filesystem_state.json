{"file_contents":{"design_guidelines.md":{"content":"# GTD System Design Guidelines\n\n## Design Approach\n**Reference-Based Approach**: Drawing inspiration from productivity tools like Notion and Linear, with a focus on clean, functional design that supports focused work and clear task management.\n\n## Core Design Elements\n\n### A. Color Palette\n**Primary Colors:**\n- Dark Mode: Deep navy base (220 15% 12%) with soft purple accents (250 50% 65%)\n- Light Mode: Clean whites (0 0% 98%) with professional blue tones (220 90% 50%)\n- Success states: Soft green (142 76% 36%) for completed tasks\n- Chat interface: Distinct purple gradient (250 100% 70% to 280 100% 75%)\n\n### B. Typography\n- **Primary**: Inter or similar modern sans-serif via Google Fonts\n- **Headers**: Font weights 600-700 for section titles\n- **Body**: Font weight 400 for task lists and descriptions\n- **Chat**: Slightly smaller font size (14px) for conversational interface\n\n### C. Layout System\n**Tailwind Spacing**: Consistent use of units 2, 4, 6, and 8\n- Padding: p-4 for cards, p-6 for sections\n- Margins: m-2 for list items, m-4 for section spacing\n- Gaps: gap-4 for grids, gap-6 for major sections\n\n### D. Component Library\n\n**Core Sections:**\n- Collapsible panels with smooth expand/collapse animations\n- Clean card-based layout for each GTD category\n- Minimalist checkboxes with satisfying completion states\n- Drag-and-drop visual feedback with subtle shadows\n\n**AI Chat Integration:**\n- Fixed or sliding panel design (right side or bottom)\n- Chat bubble interface with distinct styling from main content\n- Input field with purple gradient accent matching the theme\n- Clear visual separation between AI responses and user inputs\n\n**Task Management:**\n- Simple list-based layout for tasks within each category\n- Inline editing capabilities with clean form inputs\n- Completion states with strikethrough and fade effects\n- Priority indicators using subtle color coding\n\n**Navigation:**\n- Clean section headers with expand/collapse indicators\n- Breadcrumb-style navigation for deeper task organization\n- Search functionality integrated into the header area\n\n### E. Interactions\n- Minimal animations focusing on state changes and feedback\n- Smooth transitions for collapsible sections (300ms ease)\n- Subtle hover states for interactive elements\n- Loading states for AI chat responses\n\n## Special Considerations\n\n**GTD Methodology Support:**\n- Clear visual hierarchy matching GTD categories\n- Easy task capture and categorization\n- Weekly/daily review interfaces\n- Context-based task filtering\n\n**AI Chat Experience:**\n- Natural language processing visual feedback\n- Clear confirmation when items are added/modified\n- Seamless integration without overwhelming the main interface\n- Error states for failed AI operations\n\n**Data Persistence:**\n- Visual indicators for auto-save states\n- Clean loading states during data operations\n- Offline capability messaging if applicable\n\nThis design prioritizes clarity, focus, and the natural workflow of GTD methodology while incorporating modern AI-assisted task management in a visually cohesive way.","size_bytes":3056},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# GTD System - Getting Things Done Productivity Application\n\n## Overview\n\nThis is a modern Getting Things Done (GTD) productivity application built with React, TypeScript, and Express. The system helps users organize tasks, projects, goals, and areas of focus according to David Allen's GTD methodology. It features a clean, reference-based design inspired by productivity tools like Notion and Linear, with an integrated AI chat assistant for natural language task management.\n\nThe application implements the core GTD categories: High Focus tasks, Quick Work items, Quick Personal tasks, Home tasks, Waiting For items, and Someday/Maybe lists. It also includes project management, goal tracking across different timeframes (vision, 3-5 year, 1-2 year), and area management for life domains.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern development\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI primitives with shadcn/ui component library for consistent, accessible design\n- **Styling**: Tailwind CSS with custom design system supporting light/dark modes\n- **Build Tool**: Vite for fast development and optimized production builds\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js for the REST API server\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints for CRUD operations on tasks, projects, goals, and areas\n- **Session Management**: Connect-pg-simple for PostgreSQL-backed session storage\n- **Development**: TSX for TypeScript execution in development mode\n\n### Data Storage\n- **Database**: PostgreSQL as the primary data store\n- **Schema Design**: Four main entities (tasks, projects, goals, areas) with proper foreign key relationships\n- **Database Provider**: Neon serverless PostgreSQL for cloud deployment\n- **Migrations**: Drizzle Kit for database schema management and migrations\n- **Connection Pooling**: Neon serverless connection pooling for efficient database access\n\n### Design System\n- **Component Library**: Custom component system built on Radix UI primitives\n- **Typography**: Inter font family via Google Fonts for modern, readable text\n- **Color Scheme**: Dual-theme support with navy/purple accents in dark mode and clean blues in light mode\n- **Layout System**: Consistent Tailwind spacing units (2, 4, 6, 8) for visual harmony\n- **Interactive Elements**: Smooth animations for collapsible sections, hover states, and task completion\n\n### Authentication & Authorization\n- **Session-based Authentication**: Express sessions stored in PostgreSQL\n- **User Management**: Basic user model with username-based identification\n- **Storage Abstraction**: Interface-based storage layer supporting both memory and database implementations\n\n### AI Integration\n- **Chat Interface**: Fixed/sliding panel design with conversational UI\n- **Natural Language Processing**: Simulated AI responses for task and project management\n- **Purple Gradient Theming**: Distinct visual styling for AI chat separate from main application\n\n## External Dependencies\n\n### Core Framework Dependencies\n- **React Ecosystem**: React 18, React DOM, Wouter for routing, TanStack React Query for data fetching\n- **TypeScript**: Full TypeScript support with strict type checking enabled\n- **Build Tools**: Vite with React plugin, ESBuild for server bundling, PostCSS for CSS processing\n\n### UI and Styling\n- **Radix UI**: Complete set of accessible UI primitives including dialogs, dropdowns, tooltips, and form controls\n- **Tailwind CSS**: Utility-first CSS framework with custom configuration for the design system\n- **Class Variance Authority**: For creating consistent component variants\n- **Lucide React**: Modern icon library for consistent iconography\n\n### Backend Infrastructure\n- **Express.js**: Web application framework with middleware support\n- **Drizzle ORM**: Modern TypeScript ORM with Zod integration for runtime validation\n- **Neon Database**: Serverless PostgreSQL with WebSocket support for real-time connections\n- **Session Management**: Connect-pg-simple for PostgreSQL session storage\n\n### Development and Tooling\n- **TSX**: TypeScript execution engine for development\n- **Drizzle Kit**: Database migration and introspection tool\n- **Replit Integration**: Development environment plugins for error handling and debugging\n- **Google Fonts**: External font loading for typography consistency\n\n### Utility Libraries\n- **Date-fns**: Date manipulation and formatting utilities\n- **CLSX & Tailwind Merge**: Conditional CSS class composition\n- **Nanoid**: URL-safe unique ID generation\n- **Hook Form**: Form validation with Zod resolver integration","size_bytes":4904},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/openai.ts":{"content":"import OpenAI from \"openai\";\n\n/*\nFollow these instructions when using this blueprint:\n1. Note that the newest OpenAI model is \"gpt-5\", not \"gpt-4o\" or \"gpt-4\". gpt-5 was released on August 7, 2025, after your knowledge cutoff. Always prefer using gpt-5 as it is the latest model. When copying code from this blueprint, ensure you also mention this information verbatim as a comment so that you don't revert it to older models: `// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user`\n2. Use the response_format: { type: \"json_object\" } option\n3. Request output in JSON format in the prompt\n4. gpt-5 doesn't support temperature parameter, do not use it.\n*/\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nexport interface GTDAction {\n  type: 'task' | 'project' | 'goal' | 'none';\n  data?: {\n    title?: string;\n    text?: string;\n    category?: string;\n    timeframe?: string;\n    status?: string;\n    notes?: string;\n    areaId?: string;\n    projectId?: string;\n  };\n}\n\nexport interface GTDResponse {\n  response: string;\n  actions: GTDAction[];\n}\n\n// Intelligent fallback processing when OpenAI is unavailable\nfunction processGTDCommandFallback(userMessage: string): GTDResponse {\n  const message = userMessage.toLowerCase();\n  \n  // Task patterns\n  if (message.includes('task') || message.includes('remember') || message.includes('need to') || message.includes('should')) {\n    let category = 'quick_work';\n    let taskText = userMessage;\n    \n    // Extract task text\n    const taskPatterns = [\n      /(?:add|create|new) task:?\\s*(.*?)\\.?$/i,\n      /(?:i need to|should|remember to)\\s+(.*?)\\.?$/i,\n      /task:?\\s*(.*?)\\.?$/i\n    ];\n    \n    for (const pattern of taskPatterns) {\n      const match = userMessage.match(pattern);\n      if (match) {\n        taskText = match[1].trim();\n        break;\n      }\n    }\n    \n    // Smart categorization\n    if (message.includes('personal') || message.includes('doctor') || message.includes('family') || message.includes('friend')) {\n      category = 'quick_personal';\n    } else if (message.includes('home') || message.includes('house') || message.includes('clean') || message.includes('fix')) {\n      category = 'home';\n    } else if (message.includes('important') || message.includes('urgent') || message.includes('focus') || message.includes('priority')) {\n      category = 'high_focus';\n    } else if (message.includes('wait') || message.includes('waiting') || message.includes('follow up')) {\n      category = 'waiting_for';\n    } else if (message.includes('maybe') || message.includes('someday') || message.includes('consider')) {\n      category = 'someday';\n    }\n    \n    return {\n      response: `I've created a task \"${taskText}\" in your ${category.replace('_', ' ')} category. Even though I'm running in backup mode, I can still help you stay organized!`,\n      actions: [{ type: 'task', data: { text: taskText, category } }]\n    };\n  }\n  \n  // Project patterns\n  if (message.includes('project') || message.includes('initiative') || message.includes('campaign')) {\n    let projectTitle = userMessage;\n    const projectPatterns = [\n      /(?:add|create|new|start) project:?\\s*(.*?)\\.?$/i,\n      /project:?\\s*(.*?)\\.?$/i\n    ];\n    \n    for (const pattern of projectPatterns) {\n      const match = userMessage.match(pattern);\n      if (match) {\n        projectTitle = match[1].trim();\n        break;\n      }\n    }\n    \n    return {\n      response: `I've created a new project \"${projectTitle}\" for you. I'm currently running in backup mode, but your GTD system is fully functional!`,\n      actions: [{ type: 'project', data: { title: projectTitle, status: 'active', notes: 'Created via AI assistant (backup mode)' } }]\n    };\n  }\n  \n  // Goal patterns\n  if (message.includes('goal') || message.includes('vision') || message.includes('aspir') || message.includes('dream')) {\n    let goalText = userMessage;\n    let timeframe = '1_2_year';\n    \n    const goalPatterns = [\n      /(?:add|create|new|set) goal:?\\s*(.*?)\\.?$/i,\n      /goal:?\\s*(.*?)\\.?$/i\n    ];\n    \n    for (const pattern of goalPatterns) {\n      const match = userMessage.match(pattern);\n      if (match) {\n        goalText = match[1].trim();\n        break;\n      }\n    }\n    \n    if (message.includes('vision') || message.includes('long') || message.includes('life') || message.includes('20') || message.includes('retire')) {\n      timeframe = 'vision';\n    } else if (message.includes('quarter') || message.includes('qtr') || message.includes('3 month') || message.includes('90 day') || /\\bq[1-4]\\b/i.test(message)) {\n      timeframe = 'quarterly';\n    } else if (message.includes('week') || message.includes('this week') || message.includes('next week') || message.includes('7 day') || message.includes('eow') || message.includes('by friday')) {\n      timeframe = 'weekly';\n    } else if ((message.includes('3') && (message.includes('year') || message.includes('medium'))) || (message.includes('5') && message.includes('year'))) {\n      timeframe = '3_5_year';\n    }\n    \n    return {\n      response: `I've added \"${goalText}\" as a ${timeframe.replace('_', '-')} goal. I'm operating in backup mode right now, but your goals are safely stored!`,\n      actions: [{ type: 'goal', data: { text: goalText, timeframe } }]\n    };\n  }\n  \n  // General helpful response\n  return {\n    response: \"I'm currently operating in backup mode due to temporary API limitations, but I can still help you create tasks, projects, and goals! Try saying things like 'I need to call the dentist' or 'create project: website redesign'.\",\n    actions: []\n  };\n}\n\n// Normalize timeframe values to canonical tokens\nfunction normalizeTimeframe(timeframe: string | undefined): string {\n  if (!timeframe) return '1_2_year';\n  \n  const canonicalValues = ['vision', '3_5_year', '1_2_year', 'quarterly', 'weekly'];\n  \n  // Short-circuit if already canonical\n  if (canonicalValues.includes(timeframe)) return timeframe;\n  \n  const normalized = timeframe.toLowerCase().replace(/[^a-z0-9_]/g, '');\n  \n  // Map common variants to canonical values\n  const timeframeMap: Record<string, string> = {\n    'vision': 'vision',\n    'longterm': 'vision',\n    'life': 'vision',\n    'retirement': 'vision',\n    'retire': 'vision',\n    '10year': 'vision',\n    '15year': 'vision',\n    '20year': 'vision',\n    'decade': 'vision',\n    'decades': 'vision',\n    '3_5_year': '3_5_year',\n    '35year': '3_5_year',\n    '35years': '3_5_year',\n    '3year': '3_5_year',\n    '3years': '3_5_year',\n    '5year': '3_5_year',\n    '5years': '3_5_year',\n    'mediumterm': '3_5_year',\n    '1_2_year': '1_2_year',\n    '12year': '1_2_year',\n    '12years': '1_2_year',\n    '1year': '1_2_year',\n    '1years': '1_2_year',\n    '2year': '1_2_year',\n    '2years': '1_2_year',\n    'annual': '1_2_year',\n    'yearly': '1_2_year',\n    'quarterly': 'quarterly',\n    'quarter': 'quarterly',\n    'quarters': 'quarterly',\n    'q1': 'quarterly',\n    'q2': 'quarterly',\n    'q3': 'quarterly',\n    'q4': 'quarterly',\n    '3month': 'quarterly',\n    '3months': 'quarterly',\n    '90day': 'quarterly',\n    '90days': 'quarterly',\n    'weekly': 'weekly',\n    'week': 'weekly',\n    'weeks': 'weekly',\n    '7day': 'weekly',\n    '7days': 'weekly',\n    'thisweek': 'weekly',\n    'nextweek': 'weekly'\n  };\n  \n  return timeframeMap[normalized] || '1_2_year';\n}\n\nexport async function processGTDCommand(userMessage: string): Promise<GTDResponse> {\n  try {\n    const systemPrompt = `You are a proactive GTD expert assistant that helps users organize their thoughts into actionable systems. Be decisive, transparent, and create multiple items when needed.\n\nCORE PRINCIPLES:\n1. BE PROACTIVE: Don't ask clarifying questions unless absolutely necessary\n2. BE TRANSPARENT: Always clearly state what you're creating\n3. CREATE MULTIPLE ITEMS: Users often need both projects AND tasks in one request\n4. BE CONTEXT-AWARE: Understand relationships between related items\n\nGTD METHODOLOGY:\n- PROJECTS: Outcomes requiring 2+ actions (decide on going to celebration, plan vacation)\n- TASKS: Single, specific next actions (look at flights, call someone, research options)\n- GOALS: Aspirational outcomes with specific timeframes\n\nGOAL TIMEFRAMES (use exact values):\n- \"vision\": 10-20 year life goals, retirement, life vision\n- \"3_5_year\": Medium-term aspirations, career milestones\n- \"1_2_year\": Near-term achievements, annual goals\n- \"quarterly\": 3-month objectives, Q1/Q2/Q3/Q4 goals, 90-day targets\n- \"weekly\": This week's targets, weekly habits, 7-day objectives\n\nSMART CATEGORIZATION:\nTASKS by Context:\n- high_focus: Important decisions, deep work, urgent deadlines\n- quick_work: Professional tasks <15 min (emails, quick calls, research)\n- quick_personal: Personal tasks <15 min (texts, small errands, appointments)\n- home: House/family related (repairs, cleaning, family activities)\n- waiting_for: Delegated items, pending responses\n- someday: Future considerations, \"maybe\" items\n\nPROJECTS by Status:\n- active: Currently working on with defined next actions\n- on_hold: Paused, waiting for external factors\n\nINTELLIGENT PARSING EXAMPLES:\nInput: \"project: decide on going to Karrah's celebration of life. I need to look at flights and talk to Maureen\"\n→ CREATE: 1 project + 2 tasks\n→ RESPONSE: \"I've created a project 'Decide on going to Karrah's celebration of life' and added two tasks: 'Look at flights to Syracuse' (quick work) and 'Talk to Maureen about celebration' (quick personal).\"\n\nInput: \"I need to plan my vacation to Italy next summer\"\n→ CREATE: 1 project + related tasks\n→ RESPONSE: \"I've created a project 'Plan vacation to Italy' and added initial tasks like 'Research Italian destinations' and 'Check passport expiration'.\"\n\nInput: \"Set a quarterly goal to increase revenue by 20%\"\n→ CREATE: 1 goal\n→ RESPONSE: \"I've created a quarterly goal 'Increase revenue by 20%' for the next three months.\"\n\nInput: \"My weekly objective is to publish 2 blog posts\"\n→ CREATE: 1 goal\n→ RESPONSE: \"I've added 'Publish 2 blog posts' as a weekly objective.\"\n\nRESPONSE FORMAT (JSON):\n{\n  \"response\": \"Clear, transparent explanation of what was created\",\n  \"actions\": [\n    {\n      \"type\": \"project|task|goal\",\n      \"data\": {\n        \"title\": \"for projects\",\n        \"text\": \"for tasks and goals\",\n        \"category\": \"for tasks only\",\n        \"timeframe\": \"for goals only\", \n        \"status\": \"for projects only\",\n        \"notes\": \"optional context\"\n      }\n    }\n  ]\n}\n\nTRANSPARENCY RULES:\n- Always state exactly what you created: \"I've created...\", \"I've added...\"\n- Mention categories/contexts: \"in your quick work list\", \"as a high focus task\"\n- Explain reasoning when helpful: \"since this requires coordination\"\n- Use active voice: \"I've created\" not \"A project has been created\"\n\nBe confident, helpful, and make users feel organized and in control!`;\n\n    const response = await openai.chat.completions.create({\n      model: \"gpt-4o-mini\", // Using GPT-4o Mini for cost efficiency while maintaining excellent GTD task understanding\n      messages: [\n        { role: \"system\", content: systemPrompt },\n        { role: \"user\", content: userMessage }\n      ],\n      response_format: { type: \"json_object\" }\n    });\n\n    const result = JSON.parse(response.choices[0].message.content || '{}');\n    \n    // Normalize timeframes in actions\n    const normalizedActions = (result.actions || []).map((action: GTDAction) => {\n      if (action.type === 'goal') {\n        return {\n          ...action,\n          data: {\n            ...action.data,\n            timeframe: normalizeTimeframe(action.data?.timeframe)\n          }\n        };\n      }\n      return action;\n    });\n    \n    return {\n      response: result.response || \"I understand your request. Let me help you with that.\",\n      actions: normalizedActions\n    };\n  } catch (error) {\n    console.error('OpenAI processing error:', error);\n    \n    // Check if it's a quota/billing issue\n    const errorMessage = error instanceof Error ? error.message : String(error);\n    const errorStatus = error && typeof error === 'object' && 'status' in error ? error.status : null;\n    \n    if (errorMessage.includes('quota') || errorMessage.includes('billing') || errorStatus === 429) {\n      console.log('OpenAI quota exceeded, using intelligent fallback...');\n      return processGTDCommandFallback(userMessage);\n    }\n    \n    // For other errors, try fallback too\n    return processGTDCommandFallback(userMessage);\n  }\n}","size_bytes":12620},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertTaskSchema, insertProjectSchema, insertGoalSchema, insertAreaSchema } from \"@shared/schema\";\nimport { processGTDCommand } from \"./openai\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Task routes\n  app.get(\"/api/tasks\", async (_req, res) => {\n    try {\n      const tasks = await storage.getTasks();\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const result = insertTaskSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid task data\", details: result.error });\n      }\n      const task = await storage.createTask(result.data);\n      res.status(201).json(task);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create task\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const task = await storage.updateTask(id, req.body);\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTask(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete task\" });\n    }\n  });\n\n  // Project routes\n  app.get(\"/api/projects\", async (_req, res) => {\n    try {\n      const projects = await storage.getProjects();\n      res.json(projects);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      const result = insertProjectSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid project data\", details: result.error });\n      }\n      const project = await storage.createProject(result.data);\n      res.status(201).json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create project\" });\n    }\n  });\n\n  app.patch(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const project = await storage.updateProject(id, req.body);\n      res.json(project);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update project\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteProject(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete project\" });\n    }\n  });\n\n  // Get tasks for a specific project\n  app.get(\"/api/projects/:id/tasks\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const tasks = await storage.getTasksByProject(id);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to get project tasks\" });\n    }\n  });\n\n  // Goal routes\n  app.get(\"/api/goals\", async (_req, res) => {\n    try {\n      const goals = await storage.getGoals();\n      res.json(goals);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch goals\" });\n    }\n  });\n\n  app.post(\"/api/goals\", async (req, res) => {\n    try {\n      const result = insertGoalSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid goal data\", details: result.error });\n      }\n      const goal = await storage.createGoal(result.data);\n      res.status(201).json(goal);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create goal\" });\n    }\n  });\n\n  app.patch(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const goal = await storage.updateGoal(id, req.body);\n      res.json(goal);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update goal\" });\n    }\n  });\n\n  app.delete(\"/api/goals/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteGoal(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete goal\" });\n    }\n  });\n\n  // Area routes\n  app.get(\"/api/areas\", async (_req, res) => {\n    try {\n      const areas = await storage.getAreas();\n      res.json(areas);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to fetch areas\" });\n    }\n  });\n\n  app.post(\"/api/areas\", async (req, res) => {\n    try {\n      const result = insertAreaSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ error: \"Invalid area data\", details: result.error });\n      }\n      const area = await storage.createArea(result.data);\n      res.status(201).json(area);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to create area\" });\n    }\n  });\n\n  // IMPORTANT: Specific routes must come before parameterized routes\n  app.patch(\"/api/areas/reorder\", async (req, res) => {\n    try {\n      console.log('Received reorder request:', req.body);\n      const { areaOrders } = req.body;\n      if (!Array.isArray(areaOrders)) {\n        console.error('areaOrders is not an array:', areaOrders);\n        return res.status(400).json({ error: \"areaOrders must be an array\" });\n      }\n      \n      // Validate each area order object\n      for (const item of areaOrders) {\n        if (!item.id || typeof item.order !== 'number') {\n          console.error('Invalid area order item:', item);\n          return res.status(400).json({ error: \"Each area order must have id and order (number)\" });\n        }\n      }\n      \n      console.log('Calling storage.reorderAreas with:', areaOrders);\n      await storage.reorderAreas(areaOrders);\n      console.log('Successfully reordered areas');\n      res.status(200).json({ success: true });\n    } catch (error) {\n      console.error('Error in reorder areas route:', error);\n      res.status(500).json({ error: \"Failed to reorder areas\", details: error.message });\n    }\n  });\n\n  app.patch(\"/api/areas/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const area = await storage.updateArea(id, req.body);\n      res.json(area);\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to update area\" });\n    }\n  });\n\n  app.delete(\"/api/areas/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteArea(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ error: \"Failed to delete area\" });\n    }\n  });\n\n  // AI Chat endpoint\n  app.post(\"/api/ai/chat\", async (req, res) => {\n    try {\n      const { message } = req.body;\n      if (!message) {\n        return res.status(400).json({ error: \"Message is required\" });\n      }\n\n      // Use OpenAI to process the GTD command\n      const { response: aiResponse, actions } = await processGTDCommand(message);\n      const actionResults = [];\n\n      // Execute all actions\n      let createdProjectId: string | null = null;\n      \n      for (const action of actions) {\n        if (action.type === 'task' && action.data) {\n          try {\n            // Validate that task has non-empty text\n            const taskText = action.data.text?.trim();\n            if (!taskText) {\n              console.warn('Skipping task creation: empty text field');\n              continue;\n            }\n            \n            const task = await storage.createTask({\n              text: taskText,\n              category: action.data.category || 'quick_work',\n              completed: false,\n              projectId: action.data.projectId || createdProjectId || null\n            });\n            actionResults.push({ type: 'task_created', data: task });\n          } catch (error) {\n            console.error('Task creation error:', error);\n          }\n        } else if (action.type === 'project' && action.data) {\n          try {\n            // Validate that project has non-empty title\n            const projectTitle = action.data.title?.trim();\n            if (!projectTitle) {\n              console.warn('Skipping project creation: empty title field');\n              continue;\n            }\n            \n            const project = await storage.createProject({\n              title: projectTitle,\n              status: action.data.status || 'active',\n              notes: action.data.notes || 'Created via AI assistant',\n              areaId: action.data.areaId || null\n            });\n            createdProjectId = project.id; // Track the project ID for subsequent tasks\n            actionResults.push({ type: 'project_created', data: project });\n          } catch (error) {\n            console.error('Project creation error:', error);\n          }\n        } else if (action.type === 'goal' && action.data) {\n          try {\n            // Validate that goal has non-empty text\n            const goalText = action.data.text?.trim();\n            if (!goalText) {\n              console.warn('Skipping goal creation: empty text field');\n              continue;\n            }\n            \n            const goal = await storage.createGoal({\n              text: goalText,\n              timeframe: action.data.timeframe || '1_2_year'\n            });\n            actionResults.push({ type: 'goal_created', data: goal });\n          } catch (error) {\n            console.error('Goal creation error:', error);\n          }\n        }\n      }\n\n      res.json({\n        message: aiResponse,\n        actions: actionResults\n      });\n    } catch (error) {\n      console.error('AI chat error:', error);\n      res.status(500).json({ error: \"Failed to process AI request\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":9908},"server/storage.ts":{"content":"import { type User, type InsertUser, type Task, type InsertTask, type Project, type InsertProject, type Area, type InsertArea, type Goal, type InsertGoal, gtdTasks, gtdProjects, gtdAreas, gtdGoals, users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport { db } from \"./db\";\nimport { randomUUID } from \"crypto\";\n\n// GTD Storage Interface\nexport interface IStorage {\n  // Tasks\n  getTasks(): Promise<Task[]>;\n  getTasksByProject(projectId: string): Promise<Task[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n  \n  // Projects\n  getProjects(): Promise<Project[]>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, updates: Partial<Project>): Promise<Project>;\n  deleteProject(id: string): Promise<void>;\n  \n  // Areas\n  getAreas(): Promise<Area[]>;\n  createArea(area: InsertArea): Promise<Area>;\n  updateArea(id: string, updates: Partial<Area>): Promise<Area>;\n  deleteArea(id: string): Promise<void>;\n  reorderAreas(areaOrders: { id: string; order: number }[]): Promise<void>;\n  \n  // Goals\n  getGoals(): Promise<Goal[]>;\n  createGoal(goal: InsertGoal): Promise<Goal>;\n  updateGoal(id: string, updates: Partial<Goal>): Promise<Goal>;\n  deleteGoal(id: string): Promise<void>;\n  \n  // Legacy user methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private tasks: Map<string, Task>;\n  private projects: Map<string, Project>;\n  private areas: Map<string, Area>;\n  private goals: Map<string, Goal>;\n\n  constructor() {\n    this.users = new Map();\n    this.tasks = new Map();\n    this.projects = new Map();\n    this.areas = new Map();\n    this.goals = new Map();\n    \n    // Initialize with sample data from the original HTML\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Sample tasks from the original design\n    const sampleTasks: Task[] = [\n      {\n        id: randomUUID(),\n        text: \"Look at Bryan's stuff, learn the repositories, finish spreadsheet\",\n        category: \"high_focus\",\n        completed: false,\n        completedAt: null,\n        projectId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        text: \"Get to help tickets\",\n        category: \"high_focus\",\n        completed: false,\n        completedAt: null,\n        projectId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        text: \"Review Gabby's SOP edits\",\n        category: \"high_focus\",\n        completed: false,\n        completedAt: null,\n        projectId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        text: \"Talk with Gabby about the SOPs - Completed Tues 9/16 1:30pm\",\n        category: \"quick_work\",\n        completed: true,\n        completedAt: new Date('2024-09-16T13:30:00'),\n        projectId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        text: \"Sign up for Visible phone plans for you and wife\",\n        category: \"quick_personal\",\n        completed: false,\n        completedAt: null,\n        projectId: null,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        text: \"Research GTD communities to join\",\n        category: \"quick_personal\",\n        completed: false,\n        completedAt: null,\n        projectId: null,\n        createdAt: new Date(),\n      },\n    ];\n    \n    sampleTasks.forEach(task => this.tasks.set(task.id, task));\n    \n    // Sample goals\n    const sampleGoals: Goal[] = [\n      {\n        id: randomUUID(),\n        text: \"Bobby established in Virginia and leading a happy, not all internal, life\",\n        timeframe: \"1_2_year\",\n        createdAt: new Date(),\n      }\n    ];\n    \n    sampleGoals.forEach(goal => this.goals.set(goal.id, goal));\n    \n    // Sample areas\n    const sampleAreas: Area[] = [\n      {\n        id: randomUUID(),\n        title: \"Career & Leadership\",\n        description: \"Building expertise and influence in transforming work culture\",\n        order: 1,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Personal Development\", \n        description: \"Continuous learning and growth in productivity and leadership\",\n        order: 2,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Health & Fitness\",\n        description: \"Physical and mental wellbeing initiatives\",\n        order: 3,\n        createdAt: new Date(),\n      },\n      {\n        id: randomUUID(),\n        title: \"Family & Relationships\",\n        description: \"Nurturing connections and building meaningful relationships\",\n        order: 4,\n        createdAt: new Date(),\n      }\n    ];\n    \n    sampleAreas.forEach(area => this.areas.set(area.id, area));\n  }\n\n  // Task methods\n  async getTasks(): Promise<Task[]> {\n    return Array.from(this.tasks.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getTasksByProject(projectId: string): Promise<Task[]> {\n    return Array.from(this.tasks.values())\n      .filter(task => task.projectId === projectId)\n      .sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = { \n      ...insertTask, \n      id, \n      createdAt: new Date(),\n      completed: insertTask.completed ?? false,\n      completedAt: insertTask.completed ? new Date() : null,\n      projectId: insertTask.projectId ?? null,\n    };\n    this.tasks.set(id, task);\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const existing = this.tasks.get(id);\n    if (!existing) throw new Error('Task not found');\n    \n    const updated: Task = { \n      ...existing, \n      ...updates, \n      completedAt: updates.completed === true ? new Date() : (updates.completed === false ? null : existing.completedAt)\n    };\n    this.tasks.set(id, updated);\n    return updated;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    this.tasks.delete(id);\n  }\n\n  // Project methods\n  async getProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const id = randomUUID();\n    const project: Project = { \n      ...insertProject, \n      id, \n      createdAt: new Date(), \n      notes: insertProject.notes ?? null,\n      areaId: insertProject.areaId ?? null\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\n    const existing = this.projects.get(id);\n    if (!existing) throw new Error('Project not found');\n    const updated: Project = { ...existing, ...updates };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    this.projects.delete(id);\n  }\n\n  // Area methods\n  async getAreas(): Promise<Area[]> {\n    return Array.from(this.areas.values()).sort((a, b) => a.order - b.order);\n  }\n\n  async createArea(insertArea: InsertArea): Promise<Area> {\n    const id = randomUUID();\n    // Get the highest order value and increment by 1\n    const maxOrder = Math.max(0, ...Array.from(this.areas.values()).map(a => a.order));\n    const area: Area = { \n      ...insertArea, \n      id, \n      order: insertArea.order ?? maxOrder + 1,\n      createdAt: new Date(), \n      description: insertArea.description ?? null \n    };\n    this.areas.set(id, area);\n    return area;\n  }\n\n  async updateArea(id: string, updates: Partial<Area>): Promise<Area> {\n    const existing = this.areas.get(id);\n    if (!existing) throw new Error('Area not found');\n    const updated: Area = { ...existing, ...updates };\n    this.areas.set(id, updated);\n    return updated;\n  }\n\n  async deleteArea(id: string): Promise<void> {\n    this.areas.delete(id);\n  }\n\n  async reorderAreas(areaOrders: { id: string; order: number }[]): Promise<void> {\n    // Update the order for each area in memory\n    for (const { id, order } of areaOrders) {\n      const area = this.areas.get(id);\n      if (area) {\n        this.areas.set(id, { ...area, order });\n      }\n    }\n  }\n\n  // Goal methods\n  async getGoals(): Promise<Goal[]> {\n    return Array.from(this.goals.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const id = randomUUID();\n    const goal: Goal = { ...insertGoal, id, createdAt: new Date() };\n    this.goals.set(id, goal);\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<Goal>): Promise<Goal> {\n    const existing = this.goals.get(id);\n    if (!existing) throw new Error('Goal not found');\n    const updated: Goal = { ...existing, ...updates };\n    this.goals.set(id, updated);\n    return updated;\n  }\n\n  async deleteGoal(id: string): Promise<void> {\n    this.goals.delete(id);\n  }\n\n  // Legacy user methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\n// Database Storage Implementation\nexport class DatabaseStorage implements IStorage {\n  // Task methods\n  async getTasks(): Promise<Task[]> {\n    return await db.select().from(gtdTasks).orderBy(gtdTasks.createdAt);\n  }\n\n  async getTasksByProject(projectId: string): Promise<Task[]> {\n    return await db.select().from(gtdTasks).where(eq(gtdTasks.projectId, projectId)).orderBy(gtdTasks.createdAt);\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const [task] = await db.insert(gtdTasks).values(insertTask).returning();\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const [task] = await db\n      .update(gtdTasks)\n      .set({\n        ...updates,\n        completedAt: updates.completed === true ? new Date() : (updates.completed === false ? null : undefined)\n      })\n      .where(eq(gtdTasks.id, id))\n      .returning();\n    if (!task) throw new Error('Task not found');\n    return task;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    await db.delete(gtdTasks).where(eq(gtdTasks.id, id));\n  }\n\n  // Project methods\n  async getProjects(): Promise<Project[]> {\n    return await db.select().from(gtdProjects).orderBy(gtdProjects.createdAt);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    const [project] = await db.insert(gtdProjects).values(insertProject).returning();\n    return project;\n  }\n\n  async updateProject(id: string, updates: Partial<Project>): Promise<Project> {\n    const [project] = await db\n      .update(gtdProjects)\n      .set(updates)\n      .where(eq(gtdProjects.id, id))\n      .returning();\n    if (!project) throw new Error('Project not found');\n    return project;\n  }\n\n  async deleteProject(id: string): Promise<void> {\n    await db.delete(gtdProjects).where(eq(gtdProjects.id, id));\n  }\n\n  // Area methods\n  async getAreas(): Promise<Area[]> {\n    return await db.select().from(gtdAreas).orderBy(gtdAreas.order);\n  }\n\n  async createArea(insertArea: InsertArea): Promise<Area> {\n    // If no order is specified, get the highest order and increment\n    let areaData = insertArea;\n    if (insertArea.order === undefined || insertArea.order === null) {\n      const areas = await db.select().from(gtdAreas).orderBy(gtdAreas.order);\n      const maxOrder = areas.length > 0 ? Math.max(...areas.map(a => a.order)) : 0;\n      areaData = { ...insertArea, order: maxOrder + 1 };\n    }\n    \n    const [area] = await db.insert(gtdAreas).values(areaData).returning();\n    return area;\n  }\n\n  async updateArea(id: string, updates: Partial<Area>): Promise<Area> {\n    const [area] = await db\n      .update(gtdAreas)\n      .set(updates)\n      .where(eq(gtdAreas.id, id))\n      .returning();\n    if (!area) throw new Error('Area not found');\n    return area;\n  }\n\n  async deleteArea(id: string): Promise<void> {\n    await db.delete(gtdAreas).where(eq(gtdAreas.id, id));\n  }\n\n  async reorderAreas(areaOrders: { id: string; order: number }[]): Promise<void> {\n    console.log('DatabaseStorage.reorderAreas called with:', areaOrders);\n    try {\n      // Update all areas with their new order values in a transaction\n      for (const { id, order } of areaOrders) {\n        console.log(`Updating area ${id} to order ${order}`);\n        const result = await db.update(gtdAreas)\n          .set({ order })\n          .where(eq(gtdAreas.id, id))\n          .returning();\n        console.log(`Update result for ${id}:`, result);\n      }\n      console.log('All area updates completed successfully');\n    } catch (error) {\n      console.error('Error in DatabaseStorage.reorderAreas:', error);\n      throw error;\n    }\n  }\n\n  // Goal methods\n  async getGoals(): Promise<Goal[]> {\n    return await db.select().from(gtdGoals).orderBy(gtdGoals.createdAt);\n  }\n\n  async createGoal(insertGoal: InsertGoal): Promise<Goal> {\n    const [goal] = await db.insert(gtdGoals).values(insertGoal).returning();\n    return goal;\n  }\n\n  async updateGoal(id: string, updates: Partial<Goal>): Promise<Goal> {\n    const [goal] = await db\n      .update(gtdGoals)\n      .set(updates)\n      .where(eq(gtdGoals.id, id))\n      .returning();\n    if (!goal) throw new Error('Goal not found');\n    return goal;\n  }\n\n  async deleteGoal(id: string): Promise<void> {\n    await db.delete(gtdGoals).where(eq(gtdGoals.id, id));\n  }\n\n  // Legacy user methods\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14629},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// GTD System Tables\nexport const gtdTasks = pgTable(\"gtd_tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  text: text(\"text\").notNull(),\n  category: text(\"category\").notNull(), // \"high_focus\", \"quick_work\", \"quick_personal\", \"home\", \"waiting_for\", \"someday\"\n  completed: boolean(\"completed\").notNull().default(false),\n  completedAt: timestamp(\"completed_at\"),\n  projectId: varchar(\"project_id\"), // Optional foreign key to gtdProjects\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const gtdProjects = pgTable(\"gtd_projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  status: text(\"status\").notNull(), // \"active\", \"on_hold\", \"completed\"\n  notes: text(\"notes\"),\n  areaId: varchar(\"area_id\"), // Optional foreign key to gtdAreas\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const gtdAreas = pgTable(\"gtd_areas\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  order: integer(\"order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const gtdGoals = pgTable(\"gtd_goals\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  text: text(\"text\").notNull(),\n  timeframe: text(\"timeframe\").notNull(), // \"vision\", \"3_5_year\", \"1_2_year\"\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Insert schemas\nexport const insertTaskSchema = createInsertSchema(gtdTasks).omit({ id: true, createdAt: true });\nexport const insertProjectSchema = createInsertSchema(gtdProjects).omit({ id: true, createdAt: true });\nexport const insertAreaSchema = createInsertSchema(gtdAreas).omit({ id: true, createdAt: true });\nexport const insertGoalSchema = createInsertSchema(gtdGoals).omit({ id: true, createdAt: true });\n\n// Types\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof gtdTasks.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof gtdProjects.$inferSelect;\nexport type InsertArea = z.infer<typeof insertAreaSchema>;\nexport type Area = typeof gtdAreas.$inferSelect;\nexport type InsertGoal = z.infer<typeof insertGoalSchema>;\nexport type Goal = typeof gtdGoals.$inferSelect;\n\n// Legacy user schema for compatibility\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":3022},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Home from \"@/pages/Home\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":699},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n  \n  /* GTD System specific colors */\n  --gtd-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gtd-header: linear-gradient(135deg, #2d3436 0%, #636e72 100%);\n  --gtd-section: 0 0% 100%;\n  --gtd-section-hover: 220 13% 97%;\n\n  --foreground: 220 15% 20%;\n\n  --border: 220 10% 88%;\n\n  --card: 0 0% 96%;\n\n  --card-foreground: 220 15% 20%;\n\n  --card-border: 220 10% 85%;\n\n  --sidebar: 220 10% 94%;\n\n  --sidebar-foreground: 220 15% 20%;\n\n  --sidebar-border: 220 10% 82%;\n\n  --sidebar-primary: 220 90% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 15% 90%;\n\n  --sidebar-accent-foreground: 220 20% 25%;\n\n  --sidebar-ring: 220 90% 50%;\n\n  --popover: 220 10% 92%;\n\n  --popover-foreground: 220 15% 20%;\n\n  --popover-border: 220 10% 80%;\n\n  --primary: 220 90% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 10% 89%;\n\n  --secondary-foreground: 220 20% 25%;\n\n  --muted: 220 10% 91%;\n\n  --muted-foreground: 220 20% 50%;\n\n  --accent: 220 15% 90%;\n\n  --accent-foreground: 220 20% 25%;\n\n  --destructive: 0 85% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 75%;\n  --ring: 220 90% 50%;\n  --chart-1: 220 90% 50%;\n  --chart-2: 250 50% 65%;\n  --chart-3: 142 76% 36%;\n  --chart-4: 280 100% 70%;\n  --chart-5: 30 85% 55%;\n\n  --font-sans: Inter, Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 10% 85% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 10% 85% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 10% 85% / 0.00), 0px 1px 2px -1px hsl(220 10% 85% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 10% 85% / 0.00), 0px 1px 2px -1px hsl(220 10% 85% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 10% 85% / 0.00), 0px 2px 4px -1px hsl(220 10% 85% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 10% 85% / 0.00), 0px 4px 6px -1px hsl(220 10% 85% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 10% 85% / 0.00), 0px 8px 10px -1px hsl(220 10% 85% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 10% 85% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 15% 12%;\n  \n  /* GTD System specific colors - dark mode */\n  --gtd-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gtd-header: linear-gradient(135deg, #2d3436 0%, #636e72 100%);\n  --gtd-section: 220 15% 16%;\n  --gtd-section-hover: 220 15% 18%;\n\n  --foreground: 220 10% 90%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 15% 14%;\n\n  --card-foreground: 220 10% 90%;\n\n  --card-border: 220 15% 20%;\n\n  --sidebar: 220 15% 16%;\n\n  --sidebar-foreground: 220 10% 90%;\n\n  --sidebar-border: 220 15% 22%;\n\n  --sidebar-primary: 220 90% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 220 15% 18%;\n\n  --sidebar-accent-foreground: 220 10% 80%;\n\n  --sidebar-ring: 220 90% 50%;\n\n  --popover: 220 15% 18%;\n\n  --popover-foreground: 220 10% 90%;\n\n  --popover-border: 220 15% 24%;\n\n  --primary: 220 90% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 220 15% 20%;\n\n  --secondary-foreground: 220 10% 85%;\n\n  --muted: 220 15% 19%;\n\n  --muted-foreground: 220 10% 65%;\n\n  --accent: 220 15% 18%;\n\n  --accent-foreground: 220 10% 80%;\n\n  --destructive: 0 85% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 220 15% 35%;\n  --ring: 220 90% 50%;\n  --chart-1: 220 90% 65%;\n  --chart-2: 250 50% 75%;\n  --chart-3: 142 76% 56%;\n  --chart-4: 280 100% 80%;\n  --chart-5: 30 85% 65%;\n\n  --shadow-2xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 1px 2px -1px hsl(220 15% 8% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 2px 4px -1px hsl(220 15% 8% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 4px 6px -1px hsl(220 15% 8% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00), 0px 8px 10px -1px hsl(220 15% 8% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(220 15% 8% / 0.00);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10339},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AIChat.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Send, Loader2 } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useQueryClient } from \"@tanstack/react-query\";\n\ninterface Message {\n  id: string;\n  text: string;\n  isUser: boolean;\n  timestamp: Date;\n}\n\nexport default function AIChat() {\n  const queryClient = useQueryClient();\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: \"Hi! I can help you manage your GTD system. Try saying things like 'add a task to research camping options' or 'create a project for home improvement'.\",\n      isUser: false,\n      timestamp: new Date(),\n    }\n  ]);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const scrollAreaRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (scrollAreaRef.current) {\n      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const handleSend = async () => {\n    if (!inputValue.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputValue,\n      isUser: true,\n      timestamp: new Date(),\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const messageText = inputValue;\n    setInputValue(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await fetch('/api/ai/chat', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ message: messageText })\n      });\n\n      const result = await response.json();\n\n      const aiResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: result.message || \"I had trouble processing your request. Please try again.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n\n      setMessages(prev => [...prev, aiResponse]);\n      \n      // Refresh data if something was created\n      if (result.actions && result.actions.length > 0) {\n        const refreshQueries = new Set<string>();\n        \n        result.actions.forEach((action: any) => {\n          if (action.type === 'task_created') {\n            refreshQueries.add('/api/tasks');\n          } else if (action.type === 'project_created') {\n            refreshQueries.add('/api/projects');\n          } else if (action.type === 'goal_created') {\n            refreshQueries.add('/api/goals');\n          }\n        });\n\n        // Invalidate all the unique query keys\n        refreshQueries.forEach(queryKey => {\n          queryClient.invalidateQueries({ queryKey: [queryKey] });\n        });\n      }\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      const errorResponse: Message = {\n        id: (Date.now() + 1).toString(),\n        text: \"Sorry, I couldn't process your request. Please try again.\",\n        isUser: false,\n        timestamp: new Date(),\n      };\n      setMessages(prev => [...prev, errorResponse]);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"bg-card border-t border-card-border flex flex-col\">\n      {/* Header */}\n      <div className=\"p-4 border-b border-border bg-gradient-to-r from-chart-4 to-chart-2 text-white\">\n        <h3 className=\"font-semibold text-center\">AI Assistant</h3>\n      </div>\n\n      {/* Messages */}\n      <ScrollArea className=\"h-64 p-4\" ref={scrollAreaRef}>\n        <div className=\"space-y-4\">\n          {messages.map((message) => (\n            <div\n              key={message.id}\n              className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}\n              data-testid={`message-${message.id}`}\n            >\n              <div\n                className={`max-w-[80%] p-3 rounded-lg ${\n                  message.isUser\n                    ? 'bg-primary text-primary-foreground'\n                    : 'bg-muted text-muted-foreground'\n                }`}\n              >\n                <p className=\"text-sm leading-relaxed\">{message.text}</p>\n                <p className=\"text-xs opacity-70 mt-1\">\n                  {message.timestamp.toLocaleTimeString([], {\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </p>\n              </div>\n            </div>\n          ))}\n          {isLoading && (\n            <div className=\"flex justify-start\">\n              <div className=\"bg-muted text-muted-foreground p-3 rounded-lg flex items-center gap-2\">\n                <Loader2 className=\"h-4 w-4 animate-spin\" />\n                <span className=\"text-sm\">AI is thinking...</span>\n              </div>\n            </div>\n          )}\n        </div>\n      </ScrollArea>\n\n      {/* Input */}\n      <div className=\"p-4 border-t border-border\">\n        <div className=\"flex gap-2\">\n          <Input\n            value={inputValue}\n            onChange={(e) => setInputValue(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder=\"Ask me to add tasks, projects, or goals...\"\n            className=\"flex-1\"\n            disabled={isLoading}\n            data-testid=\"input-chat-message\"\n          />\n          <Button \n            onClick={handleSend}\n            disabled={!inputValue.trim() || isLoading}\n            size=\"icon\"\n            data-testid=\"button-send-message\"\n          >\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5676},"client/src/components/CollapsibleSection.tsx":{"content":"import { ReactNode, useState } from \"react\";\nimport { ChevronRight } from \"lucide-react\";\n\ninterface CollapsibleSectionProps {\n  title: string;\n  icon: string;\n  children: ReactNode;\n  defaultOpen?: boolean;\n}\n\nexport default function CollapsibleSection({ \n  title, \n  icon, \n  children, \n  defaultOpen = false \n}: CollapsibleSectionProps) {\n  const [isOpen, setIsOpen] = useState(defaultOpen);\n\n  return (\n    <div className=\"border-b border-border\">\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"w-full flex items-center justify-between p-6 bg-card hover:bg-accent/50 transition-all duration-300 border-l-4 border-transparent hover:border-primary\"\n        data-testid={`button-toggle-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n      >\n        <div className=\"flex items-center gap-4\">\n          <span className=\"text-2xl\">{icon}</span>\n          <h2 className=\"text-xl font-semibold text-foreground\">{title}</h2>\n        </div>\n        <ChevronRight \n          className={`h-5 w-5 text-muted-foreground transition-transform duration-300 ${\n            isOpen ? 'rotate-90' : ''\n          }`}\n        />\n      </button>\n      \n      <div \n        className={`transition-all duration-300 bg-muted/30 ${\n          isOpen ? 'opacity-100' : 'max-h-0 opacity-0 overflow-hidden'\n        }`}\n      >\n        <div className=\"p-6\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1423},"client/src/components/DeleteConfirmDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { DialogHeader, DialogTitle, DialogDescription, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DeleteConfirmDialogProps {\n  type: 'task' | 'project' | 'goal' | 'area';\n  itemId: string;\n  itemName: string;\n  onClose: () => void;\n}\n\nexport default function DeleteConfirmDialog({ type, itemId, itemName, onClose }: DeleteConfirmDialogProps) {\n  const [isDeleting, setIsDeleting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const handleDelete = async () => {\n    setIsDeleting(true);\n    try {\n      const endpoint = `/api/${type}s/${itemId}`;\n      const response = await fetch(endpoint, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error(`Failed to delete ${type}`);\n      }\n\n      await queryClient.invalidateQueries({ queryKey: [`/api/${type}s`] });\n      toast({\n        title: `${type.charAt(0).toUpperCase() + type.slice(1)} deleted`,\n        description: `\"${itemName}\" has been permanently deleted.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error(`Error deleting ${type}:`, error);\n      toast({\n        title: \"Error\",\n        description: `Failed to delete ${type}. Please try again.`,\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDeleting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Delete {type.charAt(0).toUpperCase() + type.slice(1)}</DialogTitle>\n        <DialogDescription>\n          This will permanently remove the {type} from your GTD system.\n        </DialogDescription>\n      </DialogHeader>\n      <DialogFooter>\n        <Button \n          variant=\"outline\" \n          onClick={onClose}\n          data-testid=\"button-cancel-delete\"\n        >\n          Cancel\n        </Button>\n        <Button \n          variant=\"destructive\"\n          onClick={handleDelete}\n          disabled={isDeleting}\n          data-testid=\"button-confirm-delete\"\n        >\n          {isDeleting ? 'Deleting...' : 'Delete'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":2258},"client/src/components/GTDApp.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Task, Project, Goal, Area } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport GTDHeader from \"./GTDHeader\";\nimport CollapsibleSection from \"./CollapsibleSection\";\nimport TaskSection from \"./TaskSection\";\nimport ProjectCard from \"./ProjectCard\";\nimport GoalCard from \"./GoalCard\";\nimport AIChat from \"./AIChat\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Card, CardHeader, CardTitle, CardDescription, CardContent } from \"@/components/ui/card\";\nimport { Plus, Edit, Trash2, GripVertical } from \"lucide-react\";\nimport AddProjectForm from \"./forms/AddProjectForm\";\nimport AddGoalForm from \"./forms/AddGoalForm\";\nimport AddAreaForm from \"./forms/AddAreaForm\";\nimport EditAreaForm from \"./forms/EditAreaForm\";\nimport DeleteConfirmDialog from \"./DeleteConfirmDialog\";\n\n\nexport default function GTDApp() {\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  \n  // Dialog states for manual entry\n  const [isAddProjectDialogOpen, setIsAddProjectDialogOpen] = useState(false);\n  const [isAddGoalDialogOpen, setIsAddGoalDialogOpen] = useState(false);\n  const [goalTimeframe, setGoalTimeframe] = useState<string>('1_2_year');\n  \n  // Area dialog states\n  const [isAddAreaDialogOpen, setIsAddAreaDialogOpen] = useState(false);\n  const [isEditAreaDialogOpen, setIsEditAreaDialogOpen] = useState(false);\n  const [editingArea, setEditingArea] = useState<Area | null>(null);\n  const [isDeleteAreaDialogOpen, setIsDeleteAreaDialogOpen] = useState(false);\n  const [deletingArea, setDeletingArea] = useState<Area | null>(null);\n\n  // Fetch all data from the API\n  const { data: tasks = [], isLoading: tasksLoading, refetch: refetchTasks } = useQuery<Task[]>({\n    queryKey: ['/api/tasks'],\n  });\n\n  const { data: projects = [], isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n  });\n\n  const { data: goals = [], isLoading: goalsLoading } = useQuery<Goal[]>({\n    queryKey: ['/api/goals'],\n  });\n\n  const { data: areas = [], isLoading: areasLoading } = useQuery<Area[]>({\n    queryKey: ['/api/areas'],\n  });\n\n  // Mutation for reordering areas\n  const reorderAreasMutation = useMutation({\n    mutationFn: async (areaOrders: { id: string; order: number }[]) => {\n      const response = await fetch('/api/areas/reorder', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ areaOrders }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to reorder areas');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/areas'] });\n      toast({\n        title: \"Areas reordered\",\n        description: \"Areas have been successfully reordered.\",\n      });\n    },\n    onError: (error) => {\n      console.error('Error reordering areas:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to reorder areas. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter states\n  const [selectedAreaIds, setSelectedAreaIds] = useState<string[]>([]);\n  const [areaFilterOrder, setAreaFilterOrder] = useState<string[]>([]);\n  const [draggedAreaId, setDraggedAreaId] = useState<string | null>(null);\n  const [draggedSortAreaId, setDraggedSortAreaId] = useState<string | null>(null);\n  const [dragOverAreaId, setDragOverAreaId] = useState<string | null>(null);\n\n  const handleToggleTask = async (id: string, completed: boolean) => {\n    try {\n      await fetch(`/api/tasks/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ completed })\n      });\n      refetchTasks();\n    } catch (error) {\n      console.error('Failed to toggle task:', error);\n    }\n  };\n\n  const getTasksByCategory = (category: string) => {\n    return tasks.filter((task: Task) => task.category === category);\n  };\n\n  // Get areas that have projects assigned\n  const getAreasWithProjects = () => {\n    const areaIds = new Set(projects.filter(p => p.areaId).map(p => p.areaId));\n    return areas.filter(area => areaIds.has(area.id));\n  };\n\n  // Get filtered projects based on selected areas\n  const getFilteredProjects = () => {\n    if (selectedAreaIds.length === 0) {\n      return projects;\n    }\n    return projects.filter(project => \n      selectedAreaIds.includes(project.areaId || '')\n    );\n  };\n\n  // Sort projects by area filter order and then by area\n  const getSortedProjects = () => {\n    const filteredProjects = getFilteredProjects();\n    \n    // Sort by area filter order (leftmost filter = topmost projects)\n    const projectsCopy = [...filteredProjects];\n    return projectsCopy.sort((a, b) => {\n      const aAreaIndex = areaFilterOrder.indexOf(a.areaId || '');\n      const bAreaIndex = areaFilterOrder.indexOf(b.areaId || '');\n      \n      // Projects without area come first\n      if (!a.areaId && b.areaId) return -1;\n      if (a.areaId && !b.areaId) return 1;\n      if (!a.areaId && !b.areaId) return 0;\n      \n      // Sort by filter order\n      if (aAreaIndex !== bAreaIndex) {\n        if (aAreaIndex === -1) return 1;\n        if (bAreaIndex === -1) return -1;\n        return aAreaIndex - bAreaIndex;\n      }\n      \n      return 0;\n    });\n  };\n\n  // Handle area filter toggle\n  const handleAreaFilterToggle = (areaId: string) => {\n    setSelectedAreaIds(prev => {\n      if (prev.includes(areaId)) {\n        return prev.filter(id => id !== areaId);\n      } else {\n        return [...prev, areaId];\n      }\n    });\n  };\n\n  // Get area color for badges (stable color based on area ID)\n  const getAreaFilterColor = (areaId: string, isSelected: boolean) => {\n    // Create a simple hash from area ID for stable colors\n    const hash = areaId.split('').reduce((acc, char) => acc + char.charCodeAt(0), 0);\n    const colors = [\n      'bg-chart-1 text-white',\n      'bg-chart-2 text-white', \n      'bg-chart-3 text-white',\n      'bg-chart-4 text-white',\n      'bg-chart-5 text-white',\n    ];\n    \n    const baseColor = colors[hash % colors.length] || 'bg-chart-1 text-white';\n    return isSelected ? baseColor : baseColor + ' opacity-50';\n  };\n\n  // Drag and drop handlers\n  const handleDragStart = (e: React.DragEvent, areaId: string) => {\n    setDraggedAreaId(areaId);\n    e.dataTransfer.effectAllowed = 'move';\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n  };\n\n  const handleDrop = (e: React.DragEvent, targetAreaId: string) => {\n    e.preventDefault();\n    \n    if (!draggedAreaId || draggedAreaId === targetAreaId) {\n      setDraggedAreaId(null);\n      return;\n    }\n\n    setAreaFilterOrder(prev => {\n      const newOrder = [...prev];\n      const draggedIndex = newOrder.indexOf(draggedAreaId);\n      const targetIndex = newOrder.indexOf(targetAreaId);\n      \n      if (draggedIndex > -1 && targetIndex > -1) {\n        // Remove dragged item and insert at target position\n        newOrder.splice(draggedIndex, 1);\n        const adjustedTargetIndex = draggedIndex < targetIndex ? targetIndex - 1 : targetIndex;\n        newOrder.splice(adjustedTargetIndex, 0, draggedAreaId);\n      }\n      \n      return newOrder;\n    });\n    \n    setDraggedAreaId(null);\n  };\n\n  // Drag and drop handlers for area sorting\n  const handleAreaSortDragStart = (e: React.DragEvent, areaId: string) => {\n    setDraggedSortAreaId(areaId);\n    e.dataTransfer.effectAllowed = 'move';\n    e.dataTransfer.setData('text/plain', areaId);\n    console.log('Drag started for area:', areaId);\n  };\n\n  const handleAreaSortDragEnd = () => {\n    setDraggedSortAreaId(null);\n    setDragOverAreaId(null);\n    console.log('Drag ended, cleanup completed');\n  };\n\n\n  const handleAreaSortDragLeave = (e: React.DragEvent) => {\n    // Only clear if we're actually leaving the element\n    if (!e.currentTarget.contains(e.relatedTarget as Node)) {\n      setDragOverAreaId(null);\n    }\n  };\n\n  const handleAreaSortDrop = (e: React.DragEvent, targetAreaId: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    console.log('Drop event triggered. Target:', targetAreaId, 'Dragged:', draggedSortAreaId);\n    \n    if (!draggedSortAreaId || draggedSortAreaId === targetAreaId) {\n      setDraggedSortAreaId(null);\n      setDragOverAreaId(null);\n      return;\n    }\n\n    // Find the current order of areas\n    const sortedAreas = [...areas].sort((a, b) => a.order - b.order);\n    \n    const draggedIndex = sortedAreas.findIndex(area => area.id === draggedSortAreaId);\n    const targetIndex = sortedAreas.findIndex(area => area.id === targetAreaId);\n    \n    if (draggedIndex === -1 || targetIndex === -1) {\n      console.error('Could not find dragged or target area');\n      setDraggedSortAreaId(null);\n      setDragOverAreaId(null);\n      return;\n    }\n\n    console.log('Reordering areas. From index:', draggedIndex, 'to index:', targetIndex);\n\n    // Create new order array\n    const newOrder = [...sortedAreas];\n    const [draggedArea] = newOrder.splice(draggedIndex, 1);\n    newOrder.splice(targetIndex, 0, draggedArea);\n    \n    // Generate new order values\n    const areaOrders = newOrder.map((area, index) => ({\n      id: area.id,\n      order: index + 1\n    }));\n    \n    console.log('Sending reorder request:', areaOrders);\n    \n    // Send the reorder request\n    reorderAreasMutation.mutate(areaOrders);\n    setDraggedSortAreaId(null);\n    setDragOverAreaId(null);\n  };\n\n  const sortedProjects = getSortedProjects();\n  const areasWithProjects = getAreasWithProjects();\n\n  // Group projects by area for visual grouping when multiple areas are selected\n  const getGroupedProjects = () => {\n    // Only group when multiple areas are selected\n    if (selectedAreaIds.length <= 1) {\n      return { shouldGroup: false, groups: [] };\n    }\n\n    const groups: Array<{ areaId: string | null; areaTitle: string; projects: Project[]; areaColor: string }> = [];\n    \n    // Create groups based on areaFilterOrder for selected areas\n    for (const areaId of areaFilterOrder) {\n      if (selectedAreaIds.includes(areaId)) {\n        const area = areas.find(a => a.id === areaId);\n        const areaProjects = sortedProjects.filter(p => p.areaId === areaId);\n        \n        if (areaProjects.length > 0 && area) {\n          groups.push({\n            areaId,\n            areaTitle: area.title,\n            projects: areaProjects,\n            areaColor: getAreaFilterColor(areaId, true).split(' ')[0] // Extract just the bg color\n          });\n        }\n      }\n    }\n    \n    // Add projects without area if any\n    const projectsWithoutArea = sortedProjects.filter(p => !p.areaId);\n    if (projectsWithoutArea.length > 0) {\n      groups.unshift({\n        areaId: null,\n        areaTitle: 'No Area',\n        projects: projectsWithoutArea,\n        areaColor: 'bg-muted'\n      });\n    }\n    \n    return { shouldGroup: true, groups };\n  };\n\n  const { shouldGroup, groups } = getGroupedProjects();\n\n  // Initialize area filter order when areas with projects change\n  useEffect(() => {\n    const currentAreaIds = areasWithProjects.map(area => area.id);\n    setAreaFilterOrder(prev => {\n      const newOrder = Array.from(new Set([...prev, ...currentAreaIds]));\n      return newOrder.filter(id => currentAreaIds.includes(id));\n    });\n  }, [areasWithProjects.map(a => a.id).join(',')]);\n\n  // Show loading state\n  if (tasksLoading || projectsLoading || goalsLoading || areasLoading) {\n    return (\n      <div \n        className=\"min-h-screen flex items-center justify-center\"\n        style={{ background: 'var(--gtd-gradient)' }}\n      >\n        <div className=\"text-white text-xl\">Loading your GTD system...</div>\n      </div>\n    );\n  }\n\n\n  return (\n    <div \n      className=\"min-h-screen flex flex-col\"\n      style={{ background: 'var(--gtd-gradient)' }}\n    >\n      <div className=\"flex-1 max-w-6xl mx-auto bg-background/95 backdrop-blur-sm rounded-xl shadow-2xl overflow-hidden m-4 mb-0 flex flex-col\">\n        <GTDHeader />\n        \n        <div className=\"flex-1 pb-6 overflow-y-auto\">\n          {/* Vision & Goals Section */}\n          <CollapsibleSection title=\"Vision & Goals\" icon=\"🏔️\">\n            <div className=\"space-y-6\">\n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground mb-3 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    🏔️ 10-20 Year Vision\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setGoalTimeframe('vision');\n                      setIsAddGoalDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-goal-vision\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Vision\n                  </Button>\n                </h4>\n                <div className=\"space-y-3\">\n                  {goals\n                    .filter((goal: Goal) => goal.timeframe === 'vision')\n                    .map((goal: Goal) => (\n                      <GoalCard key={goal.id} goal={goal} />\n                    ))\n                  }\n                  {goals.filter((goal: Goal) => goal.timeframe === 'vision').length === 0 && (\n                    <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                      No vision goals yet\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground mb-3 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    🌟 3-5 Year Goals\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setGoalTimeframe('3_5_year');\n                      setIsAddGoalDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-goal-3-5-year\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Goal\n                  </Button>\n                </h4>\n                <div className=\"space-y-3\">\n                  {goals\n                    .filter((goal: Goal) => goal.timeframe === '3_5_year')\n                    .map((goal: Goal) => (\n                      <GoalCard key={goal.id} goal={goal} />\n                    ))\n                  }\n                  {goals.filter((goal: Goal) => goal.timeframe === '3_5_year').length === 0 && (\n                    <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                      No 3-5 year goals yet\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground mb-3 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    🌟 1-2 Year Goals\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setGoalTimeframe('1_2_year');\n                      setIsAddGoalDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-goal-1-2-year\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Goal\n                  </Button>\n                </h4>\n                <div className=\"space-y-3\">\n                  {goals\n                    .filter((goal: Goal) => goal.timeframe === '1_2_year')\n                    .map((goal: Goal) => (\n                      <GoalCard key={goal.id} goal={goal} />\n                    ))\n                  }\n                  {goals.filter((goal: Goal) => goal.timeframe === '1_2_year').length === 0 && (\n                    <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                      No 1-2 year goals yet\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground mb-3 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    🔥 Quarterly Goals\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setGoalTimeframe('quarterly');\n                      setIsAddGoalDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-goal-quarterly\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Goal\n                  </Button>\n                </h4>\n                <div className=\"space-y-3\">\n                  {goals\n                    .filter((goal: Goal) => goal.timeframe === 'quarterly')\n                    .map((goal: Goal) => (\n                      <GoalCard key={goal.id} goal={goal} />\n                    ))\n                  }\n                  {goals.filter((goal: Goal) => goal.timeframe === 'quarterly').length === 0 && (\n                    <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                      No quarterly goals yet\n                    </div>\n                  )}\n                </div>\n              </div>\n              \n              <div>\n                <h4 className=\"text-lg font-semibold text-foreground mb-3 flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    ✅ Weekly Objectives\n                  </div>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => {\n                      setGoalTimeframe('weekly');\n                      setIsAddGoalDialogOpen(true);\n                    }}\n                    data-testid=\"button-add-goal-weekly\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-1\" />\n                    Add Objective\n                  </Button>\n                </h4>\n                <div className=\"space-y-3\">\n                  {goals\n                    .filter((goal: Goal) => goal.timeframe === 'weekly')\n                    .map((goal: Goal) => (\n                      <GoalCard key={goal.id} goal={goal} />\n                    ))\n                  }\n                  {goals.filter((goal: Goal) => goal.timeframe === 'weekly').length === 0 && (\n                    <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                      No weekly objectives yet\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </CollapsibleSection>\n\n          {/* Next Actions Section */}\n          <CollapsibleSection title=\"Next Actions\" icon=\"⚡\" defaultOpen={true}>\n            <div className=\"space-y-6\">\n              <TaskSection \n                title=\"High Focus/Important\"\n                tasks={getTasksByCategory('high_focus')}\n                onToggleTask={handleToggleTask}\n              />\n              <TaskSection \n                title=\"Quick Work\"\n                tasks={getTasksByCategory('quick_work')}\n                onToggleTask={handleToggleTask}\n              />\n              <TaskSection \n                title=\"Quick Personal\"\n                tasks={getTasksByCategory('quick_personal')}\n                onToggleTask={handleToggleTask}\n              />\n              <TaskSection \n                title=\"Home\"\n                tasks={getTasksByCategory('home')}\n                onToggleTask={handleToggleTask}\n              />\n            </div>\n          </CollapsibleSection>\n\n          {/* Projects Section */}\n          <CollapsibleSection title=\"Projects\" icon=\"🚀\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between mb-4 gap-4\">\n                <div className=\"flex items-center gap-3\">\n                  <h4 className=\"text-lg font-semibold text-foreground\">Active Projects</h4>\n                  \n                  {areasWithProjects.length > 0 && (\n                    <div className=\"flex items-center gap-2\">\n                      {areaFilterOrder\n                        .filter(areaId => areasWithProjects.some(area => area.id === areaId))\n                        .map(areaId => {\n                          const area = areasWithProjects.find(a => a.id === areaId);\n                          if (!area) return null;\n                          \n                          const isSelected = selectedAreaIds.includes(area.id);\n                          const isDragging = draggedAreaId === area.id;\n                          \n                          return (\n                            <button\n                              key={area.id}\n                              draggable\n                              onClick={() => handleAreaFilterToggle(area.id)}\n                              onDragStart={(e) => handleDragStart(e, area.id)}\n                              onDragOver={handleDragOver}\n                              onDrop={(e) => handleDrop(e, area.id)}\n                              className={`px-3 py-1 rounded-md text-sm font-medium transition-all hover:opacity-80 cursor-grab active:cursor-grabbing ${\n                                getAreaFilterColor(area.id, isSelected)\n                              } ${isDragging ? 'opacity-50 scale-95' : ''}`}\n                              data-testid={`filter-badge-${area.id}`}\n                              title=\"Click to filter, drag to reorder\"\n                            >\n                              {area.title}\n                            </button>\n                          );\n                        })}\n                    </div>\n                  )}\n                </div>\n                \n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsAddProjectDialogOpen(true)}\n                  data-testid=\"button-add-project\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Project\n                </Button>\n              </div>\n              {sortedProjects.length > 0 ? (\n                shouldGroup ? (\n                  <div className=\"space-y-6\">\n                    {groups.map((group) => (\n                      <div key={group.areaId || 'no-area'} className=\"space-y-3\">\n                        <div className=\"flex items-center gap-2 pb-2 border-b border-border\">\n                          <div className={`w-3 h-3 rounded-full ${group.areaColor}`}></div>\n                          <h4 className=\"font-medium text-foreground\">\n                            {group.areaTitle}\n                          </h4>\n                          <span className=\"text-sm text-muted-foreground\">({group.projects.length})</span>\n                        </div>\n                        <div className=\"space-y-4 pl-5\">\n                          {group.projects.map((project: Project) => (\n                            <ProjectCard key={project.id} project={project} />\n                          ))}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {sortedProjects.map((project: Project) => (\n                      <ProjectCard key={project.id} project={project} />\n                    ))}\n                  </div>\n                )\n              ) : projects.length === 0 ? (\n                <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                  No projects yet\n                </div>\n              ) : (\n                <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n                  No projects match current filters\n                </div>\n              )}\n            </div>\n          </CollapsibleSection>\n\n          {/* Areas of Focus Section */}\n          <CollapsibleSection title=\"Areas of Focus\" icon=\"🎯\">\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <p className=\"text-sm text-muted-foreground\">\n                  Manage your areas of focus to organize projects and maintain clarity on different life domains.\n                </p>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setIsAddAreaDialogOpen(true)}\n                  data-testid=\"button-add-area\"\n                >\n                  <Plus className=\"h-4 w-4 mr-1\" />\n                  Add Area\n                </Button>\n              </div>\n              \n              {areas.length > 0 ? (\n                <div className=\"space-y-4\">\n                  {areas\n                    .sort((a, b) => a.order - b.order)\n                    .map((area) => {\n                      const isDragging = draggedSortAreaId === area.id;\n                      return (\n                        <Card \n                          key={area.id} \n                          className={`group hover-elevate transition-all duration-200 ${\n                            isDragging ? 'opacity-50 scale-95' : ''\n                          } ${\n                            dragOverAreaId === area.id ? 'ring-2 ring-primary ring-offset-2' : ''\n                          }`}\n                          onDragOver={(e) => {\n                            e.preventDefault();\n                            e.stopPropagation();\n                            e.dataTransfer.dropEffect = 'move';\n                            if (draggedSortAreaId && draggedSortAreaId !== area.id) {\n                              setDragOverAreaId(area.id);\n                            }\n                          }}\n                          onDragLeave={handleAreaSortDragLeave}\n                          onDrop={(e) => handleAreaSortDrop(e, area.id)}\n                          data-testid={`card-area-${area.id}`}\n                        >\n                          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                            <div className=\"flex items-center gap-3 flex-1 min-w-0\">\n                              <div \n                                className=\"text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity cursor-grab active:cursor-grabbing\"\n                                draggable\n                                onDragStart={(e) => handleAreaSortDragStart(e, area.id)}\n                                onDragEnd={handleAreaSortDragEnd}\n                              >\n                                <GripVertical className=\"h-4 w-4\" />\n                              </div>\n                              <div className=\"space-y-1 flex-1 min-w-0\">\n                                <CardTitle className=\"text-lg font-semibold\" data-testid={`area-title-${area.id}`}>\n                                  {area.title}\n                                </CardTitle>\n                                {area.description && (\n                                  <CardDescription data-testid={`area-description-${area.id}`}>\n                                    {area.description}\n                                  </CardDescription>\n                                )}\n                              </div>\n                            </div>\n                            <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-8 w-8\"\n                                onClick={() => {\n                                  setEditingArea(area);\n                                  setIsEditAreaDialogOpen(true);\n                                }}\n                                data-testid={`button-edit-area-${area.id}`}\n                                title=\"Edit area\"\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"icon\"\n                                className=\"h-8 w-8 text-destructive hover:text-destructive\"\n                                onClick={() => {\n                                  setDeletingArea(area);\n                                  setIsDeleteAreaDialogOpen(true);\n                                }}\n                                data-testid={`button-delete-area-${area.id}`}\n                                title=\"Delete area\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </CardHeader>\n                        </Card>\n                      );\n                    })}\n                </div>\n              ) : (\n                <Card className=\"text-center text-muted-foreground\">\n                  <CardContent className=\"p-8\">\n                    <div className=\"space-y-2\">\n                      <p>No areas of focus yet</p>\n                      <p className=\"text-sm\">Areas help you organize projects and maintain clarity on different life domains.</p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n          </CollapsibleSection>\n\n          {/* Waiting For Section */}\n          <CollapsibleSection title=\"Waiting For\" icon=\"⏳\">\n            <TaskSection \n              title=\"Pending Items\"\n              tasks={getTasksByCategory('waiting_for')}\n              onToggleTask={handleToggleTask}\n            />\n          </CollapsibleSection>\n\n          {/* Someday/Maybe Section */}\n          <CollapsibleSection title=\"Someday/Maybe\" icon=\"🌙\">\n            <TaskSection \n              title=\"Future Considerations\"\n              tasks={getTasksByCategory('someday')}\n              onToggleTask={handleToggleTask}\n            />\n          </CollapsibleSection>\n        </div>\n        \n        <AIChat />\n      </div>\n      \n      {/* Manual Entry Dialogs */}\n      <Dialog open={isAddProjectDialogOpen} onOpenChange={setIsAddProjectDialogOpen}>\n        <DialogContent>\n          <AddProjectForm onClose={() => setIsAddProjectDialogOpen(false)} />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isAddGoalDialogOpen} onOpenChange={setIsAddGoalDialogOpen}>\n        <DialogContent>\n          <AddGoalForm \n            onClose={() => setIsAddGoalDialogOpen(false)}\n            defaultTimeframe={goalTimeframe}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Area Dialogs */}\n      <Dialog open={isAddAreaDialogOpen} onOpenChange={setIsAddAreaDialogOpen}>\n        <DialogContent>\n          <AddAreaForm onClose={() => setIsAddAreaDialogOpen(false)} />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isEditAreaDialogOpen} onOpenChange={setIsEditAreaDialogOpen}>\n        <DialogContent>\n          {editingArea && (\n            <EditAreaForm \n              area={editingArea}\n              onClose={() => {\n                setIsEditAreaDialogOpen(false);\n                setEditingArea(null);\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isDeleteAreaDialogOpen} onOpenChange={setIsDeleteAreaDialogOpen}>\n        <DialogContent>\n          {deletingArea && (\n            <DeleteConfirmDialog\n              type=\"area\"\n              itemId={deletingArea.id}\n              itemName={deletingArea.title}\n              onClose={() => {\n                setIsDeleteAreaDialogOpen(false);\n                setDeletingArea(null);\n              }}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":32665},"client/src/components/GTDHeader.tsx":{"content":"export default function GTDHeader() {\n  return (\n    <div \n      className=\"relative text-white p-8 text-center overflow-hidden\"\n      style={{ background: 'var(--gtd-header)' }}\n    >\n      {/* Background overlay for better text contrast */}\n      <div className=\"absolute inset-0 bg-black/10\"></div>\n      \n      <div className=\"relative z-10\">\n        <h1 className=\"text-4xl font-bold mb-6\">🚀 Getting Things Done System</h1>\n        \n        <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-6 max-w-4xl mx-auto\">\n          <p className=\"text-lg font-medium mb-2\">Life Purpose:</p>\n          <p className=\"text-base leading-relaxed\">\n            LEAD the US into a new way of working - where money is distributed by skills and not whether you own a business or are an employee - where you can pick up projects based on your abilities and get paid on results and not based on finding a \"job\"\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":966},"client/src/components/GoalCard.tsx":{"content":"import { useState } from \"react\";\nimport { Goal } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Edit2, Trash2 } from \"lucide-react\";\nimport EditGoalForm from \"@/components/forms/EditGoalForm\";\nimport DeleteConfirmDialog from \"@/components/DeleteConfirmDialog\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface GoalCardProps {\n  goal: Goal;\n}\n\nexport default function GoalCard({ goal }: GoalCardProps) {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  const handleEditClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsDeleteDialogOpen(true);\n  };\n\n  const getTimeframeIcon = (timeframe: string) => {\n    switch (timeframe) {\n      case 'vision':\n        return '🏔️';\n      case '3_5_year':\n        return '🌟';\n      case '1_2_year':\n        return '🌟';\n      case 'quarterly':\n        return '🔥';\n      case 'weekly':\n        return '✅';\n      default:\n        return '🎯';\n    }\n  };\n\n  const getTimeframeColor = (timeframe: string) => {\n    switch (timeframe) {\n      case 'vision':\n        return 'border-l-chart-4';\n      case '3_5_year':\n        return 'border-l-chart-2';\n      case '1_2_year':\n        return 'border-l-chart-3';\n      case 'quarterly':\n        return 'border-l-chart-1';\n      case 'weekly':\n        return 'border-l-chart-5';\n      default:\n        return 'border-l-primary';\n    }\n  };\n\n  return (\n    <>\n      <Card \n        className={`group border-l-4 ${getTimeframeColor(goal.timeframe)} hover-elevate transition-all duration-200`}\n        data-testid={`goal-card-${goal.id}`}\n      >\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-start justify-between gap-3\">\n            <div className=\"flex items-start gap-3 flex-1\">\n              <span className=\"text-xl flex-shrink-0\">\n                {getTimeframeIcon(goal.timeframe)}\n              </span>\n              <p className=\"text-foreground leading-relaxed\">\n                {goal.text}\n              </p>\n            </div>\n            <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleEditClick}\n                className=\"h-8 w-8 p-0\"\n                data-testid={`button-edit-goal-${goal.id}`}\n              >\n                <Edit2 className=\"h-3 w-3\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleDeleteClick}\n                className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                data-testid={`button-delete-goal-${goal.id}`}\n              >\n                <Trash2 className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <EditGoalForm \n            goal={goal}\n            onClose={() => setIsEditDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DeleteConfirmDialog\n            type=\"goal\"\n            itemId={goal.id}\n            itemName={goal.text}\n            onClose={() => setIsDeleteDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":3744},"client/src/components/ProjectCard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Project, Area } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Edit2, Trash2 } from \"lucide-react\";\nimport EditProjectForm from \"@/components/forms/EditProjectForm\";\nimport DeleteConfirmDialog from \"@/components/DeleteConfirmDialog\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface ProjectCardProps {\n  project: Project;\n}\n\nexport default function ProjectCard({ project }: ProjectCardProps) {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: areas = [] } = useQuery<Area[]>({\n    queryKey: ['/api/areas'],\n  });\n\n  const updateAreaMutation = useMutation({\n    mutationFn: async (areaId: string | undefined) => {\n      const response = await fetch(`/api/projects/${project.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ areaId }),\n      });\n      if (!response.ok) {\n        throw new Error('Failed to update project area');\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({\n        title: \"Project updated\",\n        description: `Area changed successfully.`,\n      });\n    },\n    onError: (error) => {\n      console.error('Error updating project area:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project area. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEditClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsEditDialogOpen(true);\n  };\n\n  const handleDeleteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    setIsDeleteDialogOpen(true);\n  };\n\n  const getAreaColor = (areaId: string | null) => {\n    if (!areaId) return 'bg-muted text-muted-foreground';\n    \n    const areaIndex = areas.findIndex(area => area.id === areaId);\n    const colors = [\n      'bg-chart-1 text-white',\n      'bg-chart-2 text-white', \n      'bg-chart-3 text-white',\n      'bg-chart-4 text-white',\n      'bg-chart-5 text-white',\n    ];\n    \n    return colors[areaIndex % colors.length] || 'bg-chart-1 text-white';\n  };\n\n  const getAreaText = (areaId: string | null) => {\n    if (!areaId) return 'No Area';\n    const area = areas.find(area => area.id === areaId);\n    return area?.title || 'Unknown Area';\n  };\n\n  const handleAreaChange = (newAreaId: string) => {\n    const actualAreaId = newAreaId === 'none' ? undefined : newAreaId;\n    updateAreaMutation.mutate(actualAreaId);\n  };\n\n  return (\n    <>\n      <Card \n        className=\"group hover-elevate transition-all duration-200\"\n        data-testid={`project-card-${project.id}`}\n      >\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-start justify-between gap-3\">\n            <h4 className=\"font-semibold text-foreground leading-tight flex-1\">\n              {project.title}\n            </h4>\n            <div className=\"flex items-center gap-2\">\n              <Select\n                value={project.areaId || 'none'}\n                onValueChange={handleAreaChange}\n                disabled={updateAreaMutation.isPending}\n              >\n                <SelectTrigger className=\"w-auto h-auto p-0 border-0 bg-transparent hover:bg-transparent\">\n                  <Badge \n                    className={`${getAreaColor(project.areaId)} cursor-pointer hover:opacity-80 transition-opacity ${\n                      updateAreaMutation.isPending ? 'opacity-50' : ''\n                    }`}\n                    data-testid={`badge-area-${project.id}`}\n                  >\n                    {getAreaText(project.areaId)}\n                  </Badge>\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"none\">No Area</SelectItem>\n                  {areas.map(area => (\n                    <SelectItem key={area.id} value={area.id}>\n                      {area.title}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleEditClick}\n                  className=\"h-8 w-8 p-0\"\n                  data-testid={`button-edit-project-${project.id}`}\n                >\n                  <Edit2 className=\"h-3 w-3\" />\n                </Button>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleDeleteClick}\n                  className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n                  data-testid={`button-delete-project-${project.id}`}\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </CardHeader>\n        \n        {project.notes && (\n          <CardContent className=\"pt-0\">\n            <p className=\"text-sm text-muted-foreground italic leading-relaxed\">\n              {project.notes}\n            </p>\n          </CardContent>\n        )}\n      </Card>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <EditProjectForm \n            project={project}\n            onClose={() => setIsEditDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DeleteConfirmDialog\n            type=\"project\"\n            itemId={project.id}\n            itemName={project.title}\n            onClose={() => setIsDeleteDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":6424},"client/src/components/TaskItem.tsx":{"content":"import { useState } from \"react\";\nimport { Task } from \"@shared/schema\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Edit2, Trash2 } from \"lucide-react\";\nimport EditTaskForm from \"@/components/forms/EditTaskForm\";\nimport DeleteConfirmDialog from \"@/components/DeleteConfirmDialog\";\n\ninterface TaskItemProps {\n  task: Task;\n  onToggle: (id: string, completed: boolean) => void;\n}\n\nexport default function TaskItem({ task, onToggle }: TaskItemProps) {\n  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n  const handleToggle = (checked: boolean | \"indeterminate\") => {\n    const isChecked = Boolean(checked);\n    console.log(`Task ${task.id} toggled to ${isChecked}`);\n    onToggle(task.id, isChecked);\n  };\n\n  return (\n    <>\n      <div \n        className=\"group flex items-start gap-3 p-3 border-b border-border/50 last:border-b-0 hover:bg-accent/20 transition-colors\"\n        data-testid={`task-item-${task.id}`}\n      >\n        <Checkbox\n          checked={task.completed}\n          onCheckedChange={handleToggle}\n          className=\"mt-0.5\"\n          data-testid={`checkbox-task-${task.id}`}\n        />\n        <span \n          className={`flex-1 leading-relaxed ${\n            task.completed \n              ? 'text-muted-foreground line-through opacity-70' \n              : 'text-foreground'\n          }`}\n        >\n          {task.text}\n        </span>\n        <div className=\"flex items-center gap-1 opacity-0 group-hover:opacity-100 transition-opacity\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsEditDialogOpen(true)}\n            className=\"h-8 w-8 p-0\"\n            data-testid={`button-edit-task-${task.id}`}\n          >\n            <Edit2 className=\"h-3 w-3\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setIsDeleteDialogOpen(true)}\n            className=\"h-8 w-8 p-0 text-destructive hover:text-destructive\"\n            data-testid={`button-delete-task-${task.id}`}\n          >\n            <Trash2 className=\"h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n\n      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>\n        <DialogContent>\n          <EditTaskForm \n            task={task}\n            onClose={() => setIsEditDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DeleteConfirmDialog\n            type=\"task\"\n            itemId={task.id}\n            itemName={task.text}\n            onClose={() => setIsDeleteDialogOpen(false)}\n          />\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}","size_bytes":2931},"client/src/components/TaskSection.tsx":{"content":"import { useState } from \"react\";\nimport { Task } from \"@shared/schema\";\nimport TaskItem from \"./TaskItem\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\";\nimport { Plus, ChevronRight, Target, Zap, User, Home, Clock, Moon, Clipboard } from \"lucide-react\";\nimport AddTaskForm from \"@/components/forms/AddTaskForm\";\n\ninterface TaskSectionProps {\n  title: string;\n  tasks: Task[];\n  onToggleTask: (id: string, completed: boolean) => void;\n  category?: string; // For the add task form\n  defaultOpen?: boolean; // Whether section starts open/closed\n}\n\nexport default function TaskSection({ title, tasks, onToggleTask, category, defaultOpen = true }: TaskSectionProps) {\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n  const [isExpanded, setIsExpanded] = useState(defaultOpen);\n\n  // Map section titles to category values\n  const getCategoryFromTitle = (title: string): string => {\n    switch (title.toLowerCase()) {\n      case 'high focus/important':\n        return 'high_focus';\n      case 'quick work':\n        return 'quick_work';\n      case 'quick personal':\n        return 'quick_personal';\n      case 'home':\n        return 'home';\n      case 'pending items':\n        return 'waiting_for';\n      case 'future considerations':\n        return 'someday';\n      default:\n        return category || 'quick_work';\n    }\n  };\n  if (tasks.length === 0) {\n    return (\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <button\n            onClick={() => setIsExpanded(!isExpanded)}\n            className=\"flex items-center gap-2 p-2 hover:bg-accent/50 rounded-md transition-colors flex-1 min-w-0\"\n            data-testid={`button-toggle-${getCategoryFromTitle(title)}`}\n            aria-expanded={isExpanded}\n            aria-controls={`task-section-content-${getCategoryFromTitle(title)}`}\n          >\n            <ChevronRight \n              className={`h-4 w-4 text-muted-foreground transition-transform duration-200 ${\n                isExpanded ? 'rotate-90' : ''\n              }`}\n            />\n            <span className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n              {getCategoryIcon(title)}\n              <span>{title}</span>\n            </span>\n          </button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsAddDialogOpen(true)}\n            data-testid={`button-add-task-${getCategoryFromTitle(title)}`}\n          >\n            <Plus className=\"h-4 w-4 mr-1\" />\n            Add Task\n          </Button>\n        </div>\n        \n        {isExpanded && (\n          <div className=\"mt-3 transition-opacity duration-300\" id={`task-section-content-${getCategoryFromTitle(title)}`}>\n            <div className=\"bg-card border border-card-border rounded-lg p-4 text-center text-muted-foreground\">\n              No tasks in this category yet\n            </div>\n          </div>\n        )}\n        \n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n          <DialogContent>\n            <AddTaskForm \n              onClose={() => setIsAddDialogOpen(false)}\n              defaultCategory={getCategoryFromTitle(title)}\n            />\n          </DialogContent>\n        </Dialog>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"mb-6\">\n      <div className=\"flex items-center justify-between\">\n        <button\n          onClick={() => setIsExpanded(!isExpanded)}\n          className=\"flex items-center gap-2 p-2 hover:bg-accent/50 rounded-md transition-colors flex-1 min-w-0\"\n          data-testid={`button-toggle-${getCategoryFromTitle(title)}`}\n          aria-expanded={isExpanded}\n          aria-controls={`task-section-content-${getCategoryFromTitle(title)}`}\n        >\n          <ChevronRight \n            className={`h-4 w-4 text-muted-foreground transition-transform duration-200 ${\n              isExpanded ? 'rotate-90' : ''\n            }`}\n          />\n          <span className=\"text-lg font-semibold text-foreground flex items-center gap-2\">\n            {getCategoryIcon(title)}\n            <span>{title}</span>\n            <span className=\"text-sm text-muted-foreground font-normal\">({tasks.length})</span>\n          </span>\n        </button>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsAddDialogOpen(true)}\n          data-testid={`button-add-task-${getCategoryFromTitle(title)}`}\n        >\n          <Plus className=\"h-4 w-4 mr-1\" />\n          Add Task\n        </Button>\n      </div>\n      \n      {isExpanded && (\n        <div className=\"mt-3 transition-opacity duration-300\" id={`task-section-content-${getCategoryFromTitle(title)}`}>\n          <div className=\"bg-card border border-card-border rounded-lg overflow-hidden\">\n            {tasks.map(task => (\n              <TaskItem \n                key={task.id}\n                task={task}\n                onToggle={onToggleTask}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n      \n      <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\n        <DialogContent>\n          <AddTaskForm \n            onClose={() => setIsAddDialogOpen(false)}\n            defaultCategory={getCategoryFromTitle(title)}\n          />\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n\nfunction getCategoryIcon(category: string) {\n  const iconSize = \"h-4 w-4\";\n  \n  switch (category.toLowerCase().replace(/\\s+/g, '_')) {\n    case 'high_focus':\n    case 'high_focus/important':\n      return <Target className={iconSize} />;\n    case 'quick_work':\n      return <Zap className={iconSize} />;\n    case 'quick_personal':\n      return <User className={iconSize} />;\n    case 'home':\n      return <Home className={iconSize} />;\n    case 'waiting_for':\n      return <Clock className={iconSize} />;\n    case 'someday':\n      return <Moon className={iconSize} />;\n    default:\n      return <Clipboard className={iconSize} />;\n  }\n}","size_bytes":6013},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Home.tsx":{"content":"import GTDApp from \"@/components/GTDApp\";\n\nexport default function Home() {\n  return <GTDApp />;\n}","size_bytes":98},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/examples/AIChat.tsx":{"content":"import AIChat from '../AIChat';\n\nexport default function AIChatExample() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <div className=\"flex-1 p-4\">\n        <h2>AI Chat Example</h2>\n        <p>The chat is now permanently at the bottom:</p>\n      </div>\n      <AIChat />\n    </div>\n  );\n}","size_bytes":322},"client/src/components/examples/CollapsibleSection.tsx":{"content":"import CollapsibleSection from '../CollapsibleSection';\n\nexport default function CollapsibleSectionExample() {\n  return (\n    <div className=\"max-w-4xl mx-auto\">\n      <CollapsibleSection \n        title=\"Next Actions\" \n        icon=\"⚡\" \n        defaultOpen={true}\n      >\n        <div className=\"space-y-4\">\n          <p>Sample content inside the collapsible section.</p>\n          <p>This demonstrates the smooth expand/collapse animation.</p>\n        </div>\n      </CollapsibleSection>\n      \n      <CollapsibleSection \n        title=\"Projects\" \n        icon=\"📁\"\n      >\n        <div className=\"space-y-4\">\n          <p>Another section that starts collapsed.</p>\n        </div>\n      </CollapsibleSection>\n    </div>\n  );\n}","size_bytes":730},"client/src/components/examples/GTDHeader.tsx":{"content":"import GTDHeader from '../GTDHeader';\n\nexport default function GTDHeaderExample() {\n  return (\n    <div className=\"min-h-screen\" style={{ background: 'var(--gtd-gradient)' }}>\n      <GTDHeader />\n    </div>\n  );\n}","size_bytes":213},"client/src/components/examples/GoalCard.tsx":{"content":"import GoalCard from '../GoalCard';\n\nexport default function GoalCardExample() {\n  const sampleGoals = [\n    {\n      id: '1',\n      text: 'Transform the US work culture to value skills over traditional employment structures',\n      timeframe: 'vision' as const,\n      createdAt: new Date(),\n    },\n    {\n      id: '2',\n      text: 'Build a platform connecting skilled individuals with project-based opportunities',\n      timeframe: '3_5_year' as const,\n      createdAt: new Date(),\n    },\n    {\n      id: '3',\n      text: 'Bobby established in Virginia and leading a happy, not all internal, life',\n      timeframe: '1_2_year' as const,\n      createdAt: new Date(),\n    },\n  ];\n\n  const handleEdit = (goal: any) => {\n    console.log('Editing goal:', goal.text);\n  };\n\n  return (\n    <div className=\"max-w-3xl mx-auto space-y-4 p-6\">\n      {sampleGoals.map(goal => (\n        <GoalCard \n          key={goal.id}\n          goal={goal}\n          onEdit={handleEdit}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":999},"client/src/components/examples/ProjectCard.tsx":{"content":"import ProjectCard from '../ProjectCard';\n\nexport default function ProjectCardExample() {\n  const sampleProjects = [\n    {\n      id: '1',\n      title: 'Home Office Setup',\n      status: 'active' as const,\n      notes: 'Setting up ergonomic workspace with standing desk and proper lighting',\n      createdAt: new Date(),\n    },\n    {\n      id: '2',\n      title: 'Team Leadership Training',\n      status: 'on_hold' as const,\n      notes: null,\n      createdAt: new Date(),\n    },\n    {\n      id: '3',\n      title: 'Website Redesign',\n      status: 'completed' as const,\n      notes: 'Successfully launched new design with improved user experience',\n      createdAt: new Date(),\n    },\n  ];\n\n  const handleEdit = (project: any) => {\n    console.log('Editing project:', project.title);\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto space-y-4 p-6\">\n      {sampleProjects.map(project => (\n        <ProjectCard \n          key={project.id}\n          project={project}\n          onEdit={handleEdit}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1037},"client/src/components/examples/TaskItem.tsx":{"content":"import TaskItem from '../TaskItem';\n\nexport default function TaskItemExample() {\n  const sampleTasks = [\n    {\n      id: '1',\n      text: 'Complete the project proposal',\n      category: 'high_focus' as const,\n      completed: false,\n      completedAt: null,\n      createdAt: new Date(),\n    },\n    {\n      id: '2', \n      text: 'Review team feedback - Completed yesterday',\n      category: 'quick_work' as const,\n      completed: true,\n      completedAt: new Date(),\n      createdAt: new Date(),\n    },\n    {\n      id: '3',\n      text: 'Schedule dentist appointment',\n      category: 'quick_personal' as const,\n      completed: false,\n      completedAt: null,\n      createdAt: new Date(),\n    },\n  ];\n\n  const handleToggle = (id: string, completed: boolean) => {\n    console.log(`Task ${id} toggled to ${completed}`);\n  };\n\n  return (\n    <div className=\"max-w-2xl mx-auto bg-card border border-card-border rounded-lg\">\n      {sampleTasks.map(task => (\n        <TaskItem \n          key={task.id}\n          task={task} \n          onToggle={handleToggle}\n        />\n      ))}\n    </div>\n  );\n}","size_bytes":1092},"client/src/components/examples/TaskSection.tsx":{"content":"import TaskSection from '../TaskSection';\n\nexport default function TaskSectionExample() {\n  const sampleTasks = [\n    {\n      id: '1',\n      text: 'Complete the quarterly report',\n      category: 'high_focus' as const,\n      completed: false,\n      completedAt: null,\n      createdAt: new Date(),\n    },\n    {\n      id: '2',\n      text: 'Review team standup notes',\n      category: 'quick_work' as const,\n      completed: true,\n      completedAt: new Date(),\n      createdAt: new Date(),\n    },\n    {\n      id: '3',\n      text: 'Schedule dentist appointment',\n      category: 'quick_personal' as const,\n      completed: false,\n      completedAt: null,\n      createdAt: new Date(),\n    },\n  ];\n\n  const handleToggleTask = (id: string, completed: boolean) => {\n    console.log(`Task ${id} toggled to ${completed}`);\n  };\n\n  const highFocusTasks = sampleTasks.filter(t => t.category === 'high_focus');\n  const quickWorkTasks = sampleTasks.filter(t => t.category === 'quick_work');\n\n  return (\n    <div className=\"max-w-4xl mx-auto space-y-6 p-6\">\n      <TaskSection \n        title=\"High Focus/Important\"\n        tasks={highFocusTasks}\n        onToggleTask={handleToggleTask}\n      />\n      <TaskSection \n        title=\"Quick Work\"\n        tasks={quickWorkTasks}\n        onToggleTask={handleToggleTask}\n      />\n      <TaskSection \n        title=\"Empty Category\"\n        tasks={[]}\n        onToggleTask={handleToggleTask}\n      />\n    </div>\n  );\n}","size_bytes":1444},"client/src/components/forms/AddGoalForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertGoalSchema, type InsertGoal } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddGoalFormProps {\n  onClose: () => void;\n  defaultTimeframe?: string;\n}\n\nconst goalTimeframes = [\n  { value: 'vision', label: '10-20 Year Vision' },\n  { value: '3_5_year', label: '3-5 Year Goals' },\n  { value: '1_2_year', label: '1-2 Year Goals' },\n  { value: 'quarterly', label: 'Quarterly Goals' },\n  { value: 'weekly', label: 'Weekly Objectives' },\n];\n\nexport default function AddGoalForm({ onClose, defaultTimeframe = '1_2_year' }: AddGoalFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertGoal>({\n    resolver: zodResolver(insertGoalSchema),\n    defaultValues: {\n      text: '',\n      timeframe: defaultTimeframe,\n    },\n  });\n\n  const handleSubmit = async (data: InsertGoal) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/goals', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create goal');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/goals'] });\n      const timeframeLabel = goalTimeframes.find(t => t.value === data.timeframe)?.label || data.timeframe;\n      toast({\n        title: \"Goal created\",\n        description: `\"${data.text}\" has been added to your ${timeframeLabel}.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error creating goal:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Add New Goal</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goal-text\">Goal Description</Label>\n            <Input\n              id=\"goal-text\"\n              placeholder=\"Enter your goal...\"\n              {...form.register('text')}\n              data-testid=\"input-goal-text\"\n            />\n            {form.formState.errors.text && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.text.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goal-timeframe\">Timeframe</Label>\n            <Select\n              value={form.watch('timeframe')}\n              onValueChange={(value) => form.setValue('timeframe', value)}\n            >\n              <SelectTrigger data-testid=\"select-goal-timeframe\">\n                <SelectValue placeholder=\"Select timeframe\" />\n              </SelectTrigger>\n              <SelectContent>\n                {goalTimeframes.map(timeframe => (\n                  <SelectItem key={timeframe.value} value={timeframe.value}>\n                    {timeframe.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.timeframe && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.timeframe.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-create-goal\"\n        >\n          {isSubmitting ? 'Creating...' : 'Create Goal'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":4401},"client/src/components/forms/AddProjectForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProjectSchema, type InsertProject, type Area } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddProjectFormProps {\n  onClose: () => void;\n}\n\nconst projectStatuses = [\n  { value: 'active', label: 'Active' },\n  { value: 'on_hold', label: 'On Hold' },\n  { value: 'completed', label: 'Completed' },\n];\n\nexport default function AddProjectForm({ onClose }: AddProjectFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: areas = [] } = useQuery<Area[]>({\n    queryKey: ['/api/areas'],\n  });\n\n  const form = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      title: '',\n      status: 'active',\n      notes: '',\n      areaId: undefined,\n    },\n  });\n\n  const handleSubmit = async (data: InsertProject) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/projects', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create project');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({\n        title: \"Project created\",\n        description: `\"${data.title}\" has been added to your projects.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error creating project:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Add New Project</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-title\">Project Title</Label>\n            <Input\n              id=\"project-title\"\n              placeholder=\"Enter project title...\"\n              {...form.register('title')}\n              data-testid=\"input-project-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-status\">Status</Label>\n            <Select\n              value={form.watch('status')}\n              onValueChange={(value) => form.setValue('status', value)}\n            >\n              <SelectTrigger data-testid=\"select-project-status\">\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projectStatuses.map(status => (\n                  <SelectItem key={status.value} value={status.value}>\n                    {status.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.status && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.status.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-area\">Area of Focus (Optional)</Label>\n            <Select\n              value={form.watch('areaId') || 'none'}\n              onValueChange={(value) => form.setValue('areaId', value === 'none' ? undefined : value)}\n            >\n              <SelectTrigger data-testid=\"select-project-area\">\n                <SelectValue placeholder=\"Select area of focus\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">None</SelectItem>\n                {areas.map(area => (\n                  <SelectItem key={area.id} value={area.id}>\n                    {area.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.areaId && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.areaId.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"project-notes\"\n              placeholder=\"Add any notes about this project...\"\n              {...form.register('notes')}\n              data-testid=\"textarea-project-notes\"\n            />\n            {form.formState.errors.notes && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.notes.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-create-project\"\n        >\n          {isSubmitting ? 'Creating...' : 'Create Project'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":5806},"client/src/components/forms/AddTaskForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema, type InsertTask } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddTaskFormProps {\n  onClose: () => void;\n  defaultCategory?: string;\n}\n\nconst taskCategories = [\n  { value: 'high_focus', label: 'High Focus/Important' },\n  { value: 'quick_work', label: 'Quick Work' },\n  { value: 'quick_personal', label: 'Quick Personal' },\n  { value: 'home', label: 'Home' },\n  { value: 'waiting_for', label: 'Waiting For' },\n  { value: 'someday', label: 'Someday/Maybe' },\n];\n\nexport default function AddTaskForm({ onClose, defaultCategory = 'quick_work' }: AddTaskFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      text: '',\n      category: defaultCategory,\n      completed: false,\n    },\n  });\n\n  const handleSubmit = async (data: InsertTask) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/tasks', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create task');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      toast({\n        title: \"Task created\",\n        description: `\"${data.text}\" has been added to your ${data.category.replace('_', ' ')} tasks.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error creating task:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create task. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Add New Task</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"task-text\">Task Description</Label>\n            <Input\n              id=\"task-text\"\n              placeholder=\"Enter your task...\"\n              {...form.register('text')}\n              data-testid=\"input-task-text\"\n            />\n            {form.formState.errors.text && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.text.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"task-category\">Category</Label>\n            <Select\n              value={form.watch('category')}\n              onValueChange={(value) => form.setValue('category', value)}\n            >\n              <SelectTrigger data-testid=\"select-task-category\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {taskCategories.map(category => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.category && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.category.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-create-task\"\n        >\n          {isSubmitting ? 'Creating...' : 'Create Task'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":4368},"client/src/components/forms/EditGoalForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertGoalSchema, type Goal, type InsertGoal } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditGoalFormProps {\n  goal: Goal;\n  onClose: () => void;\n}\n\nconst goalTimeframes = [\n  { value: 'vision', label: '10-20 Year Vision' },\n  { value: '3_5_year', label: '3-5 Year Goals' },\n  { value: '1_2_year', label: '1-2 Year Goals' },\n  { value: 'quarterly', label: 'Quarterly Goals' },\n  { value: 'weekly', label: 'Weekly Objectives' },\n];\n\nexport default function EditGoalForm({ goal, onClose }: EditGoalFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertGoal>({\n    resolver: zodResolver(insertGoalSchema),\n    defaultValues: {\n      text: goal.text,\n      timeframe: goal.timeframe,\n    },\n  });\n\n  const handleSubmit = async (data: InsertGoal) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/goals/${goal.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update goal');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/goals'] });\n      toast({\n        title: \"Goal updated\",\n        description: `Goal has been updated successfully.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error updating goal:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update goal. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Edit Goal</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goal-text\">Goal Description</Label>\n            <Input\n              id=\"goal-text\"\n              placeholder=\"Enter your goal...\"\n              {...form.register('text')}\n              data-testid=\"input-edit-goal-text\"\n            />\n            {form.formState.errors.text && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.text.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"goal-timeframe\">Timeframe</Label>\n            <Select\n              value={form.watch('timeframe')}\n              onValueChange={(value) => form.setValue('timeframe', value)}\n            >\n              <SelectTrigger data-testid=\"select-edit-goal-timeframe\">\n                <SelectValue placeholder=\"Select timeframe\" />\n              </SelectTrigger>\n              <SelectContent>\n                {goalTimeframes.map(timeframe => (\n                  <SelectItem key={timeframe.value} value={timeframe.value}>\n                    {timeframe.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.timeframe && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.timeframe.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-edit\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-save-goal\"\n        >\n          {isSubmitting ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":4272},"client/src/components/forms/EditProjectForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertProjectSchema, type Project, type InsertProject, type Area } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditProjectFormProps {\n  project: Project;\n  onClose: () => void;\n}\n\nconst projectStatuses = [\n  { value: 'active', label: 'Active' },\n  { value: 'on_hold', label: 'On Hold' },\n  { value: 'completed', label: 'Completed' },\n];\n\nexport default function EditProjectForm({ project, onClose }: EditProjectFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const { data: areas = [] } = useQuery<Area[]>({\n    queryKey: ['/api/areas'],\n  });\n\n  const form = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      title: project.title,\n      status: project.status,\n      notes: project.notes || '',\n      areaId: project.areaId || undefined,\n    },\n  });\n\n  const handleSubmit = async (data: InsertProject) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/projects/${project.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update project');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({\n        title: \"Project updated\",\n        description: `Project has been updated successfully.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error updating project:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Edit Project</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-title\">Project Title</Label>\n            <Input\n              id=\"project-title\"\n              placeholder=\"Enter project title...\"\n              {...form.register('title')}\n              data-testid=\"input-edit-project-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-status\">Status</Label>\n            <Select\n              value={form.watch('status')}\n              onValueChange={(value) => form.setValue('status', value)}\n            >\n              <SelectTrigger data-testid=\"select-edit-project-status\">\n                <SelectValue placeholder=\"Select status\" />\n              </SelectTrigger>\n              <SelectContent>\n                {projectStatuses.map(status => (\n                  <SelectItem key={status.value} value={status.value}>\n                    {status.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.status && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.status.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-area\">Area of Focus (Optional)</Label>\n            <Select\n              value={form.watch('areaId') || 'none'}\n              onValueChange={(value) => form.setValue('areaId', value === 'none' ? undefined : value)}\n            >\n              <SelectTrigger data-testid=\"select-edit-project-area\">\n                <SelectValue placeholder=\"Select area of focus\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"none\">None</SelectItem>\n                {areas.map(area => (\n                  <SelectItem key={area.id} value={area.id}>\n                    {area.title}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.areaId && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.areaId.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"project-notes\">Notes (Optional)</Label>\n            <Textarea\n              id=\"project-notes\"\n              placeholder=\"Add any notes about this project...\"\n              {...form.register('notes')}\n              data-testid=\"textarea-edit-project-notes\"\n            />\n            {form.formState.errors.notes && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.notes.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-edit\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-save-project\"\n        >\n          {isSubmitting ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":5925},"client/src/components/forms/EditTaskForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertTaskSchema, type Task, type InsertTask } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { DialogHeader, DialogTitle, DialogContent, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditTaskFormProps {\n  task: Task;\n  onClose: () => void;\n}\n\nconst taskCategories = [\n  { value: 'high_focus', label: 'High Focus/Important' },\n  { value: 'quick_work', label: 'Quick Work' },\n  { value: 'quick_personal', label: 'Quick Personal' },\n  { value: 'home', label: 'Home' },\n  { value: 'waiting_for', label: 'Waiting For' },\n  { value: 'someday', label: 'Someday/Maybe' },\n];\n\nexport default function EditTaskForm({ task, onClose }: EditTaskFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertTask>({\n    resolver: zodResolver(insertTaskSchema),\n    defaultValues: {\n      text: task.text,\n      category: task.category,\n      completed: task.completed,\n    },\n  });\n\n  const handleSubmit = async (data: InsertTask) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/tasks/${task.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update task');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/tasks'] });\n      toast({\n        title: \"Task updated\",\n        description: `Task has been updated successfully.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error updating task:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update task. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Edit Task</DialogTitle>\n      </DialogHeader>\n      <DialogContent>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"task-text\">Task Description</Label>\n            <Input\n              id=\"task-text\"\n              placeholder=\"Enter your task...\"\n              {...form.register('text')}\n              data-testid=\"input-edit-task-text\"\n            />\n            {form.formState.errors.text && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.text.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"task-category\">Category</Label>\n            <Select\n              value={form.watch('category')}\n              onValueChange={(value) => form.setValue('category', value)}\n            >\n              <SelectTrigger data-testid=\"select-edit-task-category\">\n                <SelectValue placeholder=\"Select category\" />\n              </SelectTrigger>\n              <SelectContent>\n                {taskCategories.map(category => (\n                  <SelectItem key={category.value} value={category.value}>\n                    {category.label}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {form.formState.errors.category && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.category.message}</p>\n            )}\n          </div>\n        </form>\n      </DialogContent>\n      <DialogFooter>\n        <Button variant=\"outline\" onClick={onClose} data-testid=\"button-cancel-edit\">\n          Cancel\n        </Button>\n        <Button \n          onClick={form.handleSubmit(handleSubmit)}\n          disabled={isSubmitting}\n          data-testid=\"button-save-task\"\n        >\n          {isSubmitting ? 'Saving...' : 'Save Changes'}\n        </Button>\n      </DialogFooter>\n    </>\n  );\n}","size_bytes":4333},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/SortableSections.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport {\n  useSortable,\n} from \"@dnd-kit/sortable\";\nimport { CSS } from \"@dnd-kit/utilities\";\n\ninterface SortableSectionData {\n  id: string;\n  title: string;\n  component: React.ReactNode;\n}\n\ninterface SortableSectionsProps {\n  sections: SortableSectionData[];\n}\n\nfunction SortableSectionWrapper({ \n  id, \n  children \n}: { \n  id: string; \n  children: React.ReactNode; \n}) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className=\"cursor-grab active:cursor-grabbing\"\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default function SortableSections({ sections: initialSections }: SortableSectionsProps) {\n  const [sections, setSections] = useState(initialSections);\n  \n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Load saved order from localStorage\n  useEffect(() => {\n    const savedOrder = localStorage.getItem('gtd-section-order');\n    if (savedOrder) {\n      try {\n        const orderIds = JSON.parse(savedOrder);\n        const reorderedSections = orderIds\n          .map((id: string) => initialSections.find(section => section.id === id))\n          .filter(Boolean);\n        \n        // Add any new sections that weren't in saved order\n        const existingIds = new Set(orderIds);\n        const newSections = initialSections.filter(section => !existingIds.has(section.id));\n        \n        setSections([...reorderedSections, ...newSections]);\n      } catch (error) {\n        console.error('Error loading section order:', error);\n        setSections(initialSections);\n      }\n    } else {\n      setSections(initialSections);\n    }\n  }, [initialSections]);\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (!over) return;\n\n    if (active.id !== over.id) {\n      setSections((items) => {\n        const oldIndex = items.findIndex(item => item.id === active.id);\n        const newIndex = items.findIndex(item => item.id === over?.id);\n        \n        const newOrder = arrayMove(items, oldIndex, newIndex);\n        \n        // Save new order to localStorage\n        const orderIds = newOrder.map(item => item.id);\n        localStorage.setItem('gtd-section-order', JSON.stringify(orderIds));\n        \n        return newOrder;\n      });\n    }\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={handleDragEnd}\n    >\n      <SortableContext\n        items={sections.map(section => section.id)}\n        strategy={verticalListSortingStrategy}\n      >\n        {sections.map((section) => (\n          <SortableSectionWrapper key={section.id} id={section.id}>\n            {section.component}\n          </SortableSectionWrapper>\n        ))}\n      </SortableContext>\n    </DndContext>\n  );\n}","size_bytes":3450},"client/src/components/forms/AddAreaForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAreaSchema, type InsertArea } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface AddAreaFormProps {\n  onClose: () => void;\n}\n\nexport default function AddAreaForm({ onClose }: AddAreaFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertArea>({\n    resolver: zodResolver(insertAreaSchema),\n    defaultValues: {\n      title: '',\n      description: '',\n    },\n  });\n\n  const handleSubmit = async (data: InsertArea) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch('/api/areas', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to create area');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/areas'] });\n      toast({\n        title: \"Area created\",\n        description: `\"${data.title}\" has been added to your areas of focus.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error creating area:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to create area. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Add New Area of Focus</DialogTitle>\n      </DialogHeader>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">\n              Title <span className=\"text-destructive\">*</span>\n            </Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Enter area title...\"\n              {...form.register('title')}\n              data-testid=\"input-area-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Add any notes about this area...\"\n              rows={3}\n              {...form.register('description')}\n              data-testid=\"textarea-area-description\"\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter className=\"gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            data-testid=\"button-cancel-area\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            data-testid=\"button-create-area\"\n          >\n            {isSubmitting ? 'Creating...' : 'Create Area'}\n          </Button>\n        </DialogFooter>\n      </form>\n    </>\n  );\n}","size_bytes":3684},"client/src/components/forms/EditAreaForm.tsx":{"content":"import { useState } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertAreaSchema, type Area, type InsertArea } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface EditAreaFormProps {\n  area: Area;\n  onClose: () => void;\n}\n\nexport default function EditAreaForm({ area, onClose }: EditAreaFormProps) {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const form = useForm<InsertArea>({\n    resolver: zodResolver(insertAreaSchema),\n    defaultValues: {\n      title: area.title,\n      description: area.description || '',\n    },\n  });\n\n  const handleSubmit = async (data: InsertArea) => {\n    setIsSubmitting(true);\n    try {\n      const response = await fetch(`/api/areas/${area.id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update area');\n      }\n\n      await queryClient.invalidateQueries({ queryKey: ['/api/areas'] });\n      toast({\n        title: \"Area updated\",\n        description: `\"${data.title}\" has been updated successfully.`,\n      });\n      onClose();\n    } catch (error) {\n      console.error('Error updating area:', error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to update area. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <>\n      <DialogHeader>\n        <DialogTitle>Edit Area of Focus</DialogTitle>\n      </DialogHeader>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n        <div className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"title\">\n              Title <span className=\"text-destructive\">*</span>\n            </Label>\n            <Input\n              id=\"title\"\n              placeholder=\"Enter area title...\"\n              {...form.register('title')}\n              data-testid=\"input-edit-area-title\"\n            />\n            {form.formState.errors.title && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.title.message}</p>\n            )}\n          </div>\n\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"description\">Description (Optional)</Label>\n            <Textarea\n              id=\"description\"\n              placeholder=\"Add any notes about this area...\"\n              rows={3}\n              {...form.register('description')}\n              data-testid=\"textarea-edit-area-description\"\n            />\n            {form.formState.errors.description && (\n              <p className=\"text-sm text-destructive\">{form.formState.errors.description.message}</p>\n            )}\n          </div>\n        </div>\n\n        <DialogFooter className=\"gap-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            data-testid=\"button-cancel-edit-area\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={isSubmitting}\n            data-testid=\"button-update-area\"\n          >\n            {isSubmitting ? 'Updating...' : 'Update Area'}\n          </Button>\n        </DialogFooter>\n      </form>\n    </>\n  );\n}","size_bytes":3762}},"version":1}